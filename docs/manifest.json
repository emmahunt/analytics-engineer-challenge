{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2023-04-12T17:49:17.050204Z", "invocation_id": "d65d41c0-f4e3-4c88-89d0-d0018a86034e", "env": {}, "project_id": "18e28fdca44665de94e518aa74304cbc", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.synthesia_challenge.user_retention": {"database": "analytics", "schema": "dev_reporting", "name": "user_retention", "resource_type": "model", "package_name": "synthesia_challenge", "path": "reporting/user_retention.sql", "original_file_path": "models/reporting/user_retention.sql", "unique_id": "model.synthesia_challenge.user_retention", "fqn": ["synthesia_challenge", "reporting", "user_retention"], "alias": "user_retention", "checksum": {"name": "sha256", "checksum": "7a459f04ba9f7b602dcf79ae36ca472c1f94f9548a4c383a7258508e6a7d0ef6"}, "config": {"enabled": true, "alias": null, "schema": "reporting", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model supports visualisation of retention analysis, by providing the cohort weekly activity data in a format that enables calculating the retention rate at any level of filtering by user dimensional attributes. The retention rate can be calculated by summing the active users and dividing by the cohort size: the data is structured with cohort sizes on different rows to the active user values, which means the columns can be safely aggregated over without the denominator in the retention calculation being 'double counted'. This data set supports whole dataset retention analysis and also segmented analysis.", "columns": {"user_cohort_week": {"name": "user_cohort_week", "description": "The date of the start of the week in which the user was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weeks_since_first_active": {"name": "weeks_since_first_active", "description": "The number of weeks since the user was created (the created_at date) in which there was pageview activity by the user. This is calculated by subtracting the page view received_at date from the user created_at date, and then dividing by 7 to get the number of weeks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_active_users_during_period": {"name": "number_of_active_users_during_period", "description": "The number of users who were active for the given weekly period, in the given cohort group and country and age group. This column is completely additive.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cohort_size": {"name": "cohort_size", "description": "The count of users in the particular cohort group and country and age group. The same count is repeated for every possible value of weekly period to ensure the retention rate can be calculated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/reporting/reporting.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "reporting"}, "created_at": 1681319450.759348, "relation_name": "analytics.dev_reporting.user_retention", "raw_code": "with weekly_activity as (select * from {{ ref('int_weekly_active_users') }})\n, cohort_size as (select * from {{ ref('int_cohort_sizes') }})\n\n-- Generate a row for each week\n, weeks_since_first_active_spine as (\n    select seq4() as weeks_since_first_active\n    from table(generator(rowcount => 8))\n)\n\n, unioned as (\n    select \n        user_cohort_week::string as user_cohort_week\n        , weeks_since_first_active\n        , country\n        , age\n        , sum(active_during_period) as number_of_active_users_during_period\n\n        -- Set this to null: when we sum over the active users (numerator in the retention rate calculation)\n        -- we don't want to also be summing over the cohort size (denominator in the retention rate calculation)\n        -- Otherwise this will \"double count\" the cohort size and change the rate\n        , null as cohort_size\n    from weekly_activity\n    group by 1, 2, 3, 4\n\n    union all\n    \n    select \n        cohort_size.user_cohort_week::string as user_cohort_week\n        , weeks_since_first_active_spine.weeks_since_first_active\n        , cohort_size.country\n        , cohort_size.age\n\n        -- Set this to null for the same reason as described above, but in this case for the numerator\n        , null as number_of_active_users_during_period\n        , cohort_size.cohort_size\n    from cohort_size\n    cross join weeks_since_first_active_spine\n\n)\n \nselect * from unioned", "language": "sql", "refs": [["int_weekly_active_users"], ["int_cohort_sizes"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.int_weekly_active_users", "model.synthesia_challenge.int_cohort_sizes"]}, "compiled_path": "target/compiled/synthesia_challenge/models/reporting/user_retention.sql", "compiled": true, "compiled_code": "with weekly_activity as (select * from analytics.dev_intermediate.int_weekly_active_users)\n, cohort_size as (select * from analytics.dev_intermediate.int_cohort_sizes)\n\n-- Generate a row for each week\n, weeks_since_first_active_spine as (\n    select seq4() as weeks_since_first_active\n    from table(generator(rowcount => 8))\n)\n\n, unioned as (\n    select \n        user_cohort_week::string as user_cohort_week\n        , weeks_since_first_active\n        , country\n        , age\n        , sum(active_during_period) as number_of_active_users_during_period\n\n        -- Set this to null: when we sum over the active users (numerator in the retention rate calculation)\n        -- we don't want to also be summing over the cohort size (denominator in the retention rate calculation)\n        -- Otherwise this will \"double count\" the cohort size and change the rate\n        , null as cohort_size\n    from weekly_activity\n    group by 1, 2, 3, 4\n\n    union all\n    \n    select \n        cohort_size.user_cohort_week::string as user_cohort_week\n        , weeks_since_first_active_spine.weeks_since_first_active\n        , cohort_size.country\n        , cohort_size.age\n\n        -- Set this to null for the same reason as described above, but in this case for the numerator\n        , null as number_of_active_users_during_period\n        , cohort_size.cohort_size\n    from cohort_size\n    cross join weeks_since_first_active_spine\n\n)\n \nselect * from unioned", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.stg_countries": {"database": "analytics", "schema": "dev_staging", "name": "stg_countries", "resource_type": "model", "package_name": "synthesia_challenge", "path": "staging/stg_countries.sql", "original_file_path": "models/staging/stg_countries.sql", "unique_id": "model.synthesia_challenge.stg_countries", "fqn": ["synthesia_challenge", "staging", "stg_countries"], "alias": "stg_countries", "checksum": {"name": "sha256", "checksum": "e64635a6c8bf101dd5927760f6b28c6442213e06f1901a2c141681817ef98015"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1681319450.6418638, "relation_name": "analytics.dev_staging.stg_countries", "raw_code": "select \n    row_number() over (order by country_code asc) as country_id\n    , country_code\n    , country_name\nfrom {{ ref('countries') }}", "language": "sql", "refs": [["countries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.synthesia_challenge.countries"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/stg_countries.sql", "compiled": true, "compiled_code": "select \n    row_number() over (order by country_code asc) as country_id\n    , country_code\n    , country_name\nfrom analytics.dev_raw.countries", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.stg_page_views": {"database": "analytics", "schema": "dev_staging", "name": "stg_page_views", "resource_type": "model", "package_name": "synthesia_challenge", "path": "staging/stg_page_views.sql", "original_file_path": "models/staging/stg_page_views.sql", "unique_id": "model.synthesia_challenge.stg_page_views", "fqn": ["synthesia_challenge", "staging", "stg_page_views"], "alias": "stg_page_views", "checksum": {"name": "sha256", "checksum": "225a5790512ea59b7bb3a2014bc75a811ebef4dfb5dde47b35035ba5ee8a7dfe"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The staging model for raw page view data. This model performs some simple data cleansing and column renaming so that all downstream models use a consistently-formatted version of this data, and there is no need for repetition in multiple models.", "columns": {"path": {"name": "path", "description": "The url path of the page that was viewed, not including the domain, protocol, top level domain or any query parameters. This column is a string of alphanumeric characters always starting with a backslash, without any special characters. e.g. '/video'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "received_at": {"name": "received_at", "description": "The timestamp at which this page view was received, presumably by the server, in the format of TIMESTAMP_NTZ(9) (or DATETIME). This is a date and time without timezone information. The range of dates is from 2022-10-28 to 2022-12-14.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_identifier": {"name": "user_identifier", "description": "The unique identifier for a user, which is a 36-character string of alphanumeric characters. In the current set of data, all non-null user_id values follow the pattern of starting with 'aaaaaaaa-'. There are some null values in this field: about 1% of the records.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1681319450.7784572, "relation_name": "analytics.dev_staging.stg_page_views", "raw_code": "with raw_data as (\n    select *\n    from {{ ref('pages_views') }}\n)\n\n-- Change column names\n, final as (\n    select\n        case\n            when name like '%account%' or name like '%/MY.ACOOUN%' then '/my_account'\n            when name like '%actors%' then '/template'\n            when name like '%video%' then '/presentation'\n            when name like '%vidmeo%' then '/presentation'\n            when name like '%library%' then '/folder'\n            when name like '%templates%' then '/themes'\n            when name like '%trash%' then '/bin'\n            when name like '%folder%' then '/folder'\n            when name like '%examples%' then '/onboarding'\n            when name like '%onboarding%' then '/onboarding'\n            when name like '%onboarding%' then '/onboarding'\n            when name like '%missing-subs%' then '/add_payment_details'\n            when name like '%sign%' then '/signup'\n            when name like '%sin-in%' then '/signup'\n            when name like '%login%' then '/login'\n            when name like '%questionnaire%' then '/survey'\n            when name like '%subscription%' then '/subscription'\n            when name like '%first-time%' then '/welcome'\n            when name like '%password%' then '/password'\n            else '/'\n        end as path\n        , dateadd('minute', uniform(0, 29, random()), received_at) as received_at\n        , {{ dbt_utils.generate_surrogate_key(['user_id', 'randstr(5, random())']) }} as user_identifier\n    from raw_data\n\n    -- Remove true duplicate page views: the pages at the same exact time, by the same user on the same page\n    qualify\n        row_number() over (\n            partition by user_id, name, received_at\n            order by received_at asc\n        ) = 1\n\n)\n\nselect * from final", "language": "sql", "refs": [["pages_views"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.synthesia_challenge.pages_views"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/stg_page_views.sql", "compiled": true, "compiled_code": "with raw_data as (\n    select *\n    from analytics.dev_raw.pages_views\n)\n\n-- Change column names\n, final as (\n    select\n        case\n            when name like '%account%' or name like '%/MY.ACOOUN%' then '/my_account'\n            when name like '%actors%' then '/template'\n            when name like '%video%' then '/presentation'\n            when name like '%vidmeo%' then '/presentation'\n            when name like '%library%' then '/folder'\n            when name like '%templates%' then '/themes'\n            when name like '%trash%' then '/bin'\n            when name like '%folder%' then '/folder'\n            when name like '%examples%' then '/onboarding'\n            when name like '%onboarding%' then '/onboarding'\n            when name like '%onboarding%' then '/onboarding'\n            when name like '%missing-subs%' then '/add_payment_details'\n            when name like '%sign%' then '/signup'\n            when name like '%sin-in%' then '/signup'\n            when name like '%login%' then '/login'\n            when name like '%questionnaire%' then '/survey'\n            when name like '%subscription%' then '/subscription'\n            when name like '%first-time%' then '/welcome'\n            when name like '%password%' then '/password'\n            else '/'\n        end as path\n        , dateadd('minute', uniform(0, 29, random()), received_at) as received_at\n        , \n    \nmd5(cast(coalesce(cast(user_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(randstr(5, random()) as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as user_identifier\n    from raw_data\n\n    -- Remove true duplicate page views: the pages at the same exact time, by the same user on the same page\n    qualify\n        row_number() over (\n            partition by user_id, name, received_at\n            order by received_at asc\n        ) = 1\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.dim_user": {"database": "analytics", "schema": "dev_marts", "name": "dim_user", "resource_type": "model", "package_name": "synthesia_challenge", "path": "marts/dim_user.sql", "original_file_path": "models/marts/dim_user.sql", "unique_id": "model.synthesia_challenge.dim_user", "fqn": ["synthesia_challenge", "marts", "dim_user"], "alias": "dim_user", "checksum": {"name": "sha256", "checksum": "de7c1a4bc3f20e9bcb2e69d86313815dc0aa98f981157ba2c751da399d6f50f4"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The user dimension table, which contains all of the descriptive attributes we know about a user. Most of these are generated randomly.", "columns": {"user_id": {"name": "user_id", "description": "A unique identifier for an inidvidual user, and the primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp at which this user account was created, in the format TIMESTAMP_NTZ(9) (or DATETIME).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_cohort_week": {"name": "user_cohort_week", "description": "The week in which the user was created, used for cohort analysis of user retention.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "A boolean column flagging if the user is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/marts/marts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1681319450.796397, "relation_name": "analytics.dev_marts.dim_user", "raw_code": "with stg_users as (select * from {{ ref('stg_users') }})\n\n, final as (\n    select\n        user_id\n        , created_at\n        , date_trunc(week, created_at)::date as user_cohort_week\n        , age\n        , country_name as country\n    from stg_users\n)\n\nselect * from final", "language": "sql", "refs": [["stg_users"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.stg_users"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/dim_user.sql", "compiled": true, "compiled_code": "with stg_users as (select * from analytics.dev_staging.stg_users)\n\n, final as (\n    select\n        user_id\n        , created_at\n        , date_trunc(week, created_at)::date as user_cohort_week\n        , age\n        , country_name as country\n    from stg_users\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.dim_web_page": {"database": "analytics", "schema": "dev_marts", "name": "dim_web_page", "resource_type": "model", "package_name": "synthesia_challenge", "path": "marts/dim_web_page.sql", "original_file_path": "models/marts/dim_web_page.sql", "unique_id": "model.synthesia_challenge.dim_web_page", "fqn": ["synthesia_challenge", "marts", "dim_web_page"], "alias": "dim_web_page", "checksum": {"name": "sha256", "checksum": "debe54249089452480ddcc259d26da9ba8681339da97261070a6a4f6e2c48879"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The user dimension table, which contains descriptive attributes we know about a web page.", "columns": {"web_page_id": {"name": "web_page_id", "description": "A unique identifier for an inidvidual web page, and the primary key for this table. This is a natural key, as the page is already uniquely defined by the path.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The url path of the page that was viewed, not including the domain, protocol, top level domain or any query parameters. This column is a string of alphanumeric characters always starting with a backslash, without any special characters. e.g. '/video'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_raw": {"name": "url_raw", "description": "The full web url of the web page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_category": {"name": "page_category", "description": "A broad grouping of the types of web pages, used for categorising the type of activity a user might be doing on that page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sign_up_process_ordinal": {"name": "sign_up_process_ordinal", "description": "A column used for sorting the sign up process pages in the correct order. There a jumps of 10 in the ordering in case new pages are added to the sign up process in the future.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/marts/marts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1681319450.800448, "relation_name": "analytics.dev_marts.dim_web_page", "raw_code": "with stg_page_views as (select * from {{ ref('stg_page_views') }})\n\n, final as (\n    select distinct\n\n        -- Use a natural key for the primary key here\n        path as web_page_id\n        , path\n        , concat('https://www.synthesia.io', path) as url_raw\n\n        -- These categorisations are demonstrative and would require working with the business / developers to refine\n        , case\n            when path = '/my_account' then 'account management'\n            when path = '/template' then 'actors'\n            when path = '/presentation' then 'project creation and management'\n            when path = '/presentation' then 'project creation and management'\n            when path = '/folder' then 'project creation and management'\n            when path = '/themes' then 'project creation and management'\n            when path = '/bin' then 'project creation and management'\n            when path = '/folder' then 'project creation and management'\n            when path = '/onboarding' then 'onboarding'\n            when path = '/onboarding' then 'onboarding'\n            when path = '/onboarding' then 'onboarding'\n            when path = '/add_payment_details' then 'account management'\n            when path = '/signup' then 'account management'\n            when path = '/signup' then 'account management'\n            when path = '/login' then 'account management'\n            when path = '/survey' then 'account management'\n            when path = '/subscription' then 'account management'\n            when path = '/welcome' then 'account management'\n            when path = '/password' then 'account management'\n            else 'other'\n        end as page_category\n        \n        -- This column captures the order in which steps are expected to be taken when a user signs up for the product\n        -- Used for sorting the pages\n        , case\n            when path = '%pricing%' then 10\n            when path = '%sign-up%' then 20\n            when path = '%login%' then 20\n            when path = '%missing-subs%' then 30\n            when path = '%first-time-visit%' then 40\n            when path = '%questionnaire%' then 50\n        end as sign_up_process_ordinal\n    from stg_page_views\n)\n\nselect * from final", "language": "sql", "refs": [["stg_page_views"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.stg_page_views"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/dim_web_page.sql", "compiled": true, "compiled_code": "with stg_page_views as (select * from analytics.dev_staging.stg_page_views)\n\n, final as (\n    select distinct\n\n        -- Use a natural key for the primary key here\n        path as web_page_id\n        , path\n        , concat('https://www.synthesia.io', path) as url_raw\n\n        -- These categorisations are demonstrative and would require working with the business / developers to refine\n        , case\n            when path = '/my_account' then 'account management'\n            when path = '/template' then 'actors'\n            when path = '/presentation' then 'project creation and management'\n            when path = '/presentation' then 'project creation and management'\n            when path = '/folder' then 'project creation and management'\n            when path = '/themes' then 'project creation and management'\n            when path = '/bin' then 'project creation and management'\n            when path = '/folder' then 'project creation and management'\n            when path = '/onboarding' then 'onboarding'\n            when path = '/onboarding' then 'onboarding'\n            when path = '/onboarding' then 'onboarding'\n            when path = '/add_payment_details' then 'account management'\n            when path = '/signup' then 'account management'\n            when path = '/signup' then 'account management'\n            when path = '/login' then 'account management'\n            when path = '/survey' then 'account management'\n            when path = '/subscription' then 'account management'\n            when path = '/welcome' then 'account management'\n            when path = '/password' then 'account management'\n            else 'other'\n        end as page_category\n        \n        -- This column captures the order in which steps are expected to be taken when a user signs up for the product\n        -- Used for sorting the pages\n        , case\n            when path = '%pricing%' then 10\n            when path = '%sign-up%' then 20\n            when path = '%login%' then 20\n            when path = '%missing-subs%' then 30\n            when path = '%first-time-visit%' then 40\n            when path = '%questionnaire%' then 50\n        end as sign_up_process_ordinal\n    from stg_page_views\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.fact_page_view": {"database": "analytics", "schema": "dev_marts", "name": "fact_page_view", "resource_type": "model", "package_name": "synthesia_challenge", "path": "marts/fact_page_view.sql", "original_file_path": "models/marts/fact_page_view.sql", "unique_id": "model.synthesia_challenge.fact_page_view", "fqn": ["synthesia_challenge", "marts", "fact_page_view"], "alias": "fact_page_view", "checksum": {"name": "sha256", "checksum": "2183e8dc8be760990c2a1a06464348ba0cd66316c2fe2a0af9e6d5ce3f1ee738"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The transactional fact table containing one row per page view event - an instance of a user accessing a page on the website.", "columns": {"page_view_id": {"name": "page_view_id", "description": "The primary key for this table, which uniquely identifies a page view event. This is a hashed surrogate key over a combination of the path, user_id and received_at columns. It seems that there are some cases where the same user can access 2 different pages at the exact same time, so the path is required as part of this unique key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The url path of the page that was viewed, not including the domain, protocol, top level domain or any query parameters. This column is a string of alphanumeric characters always starting with a backslash, without any special characters. e.g. '/video'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "received_at": {"name": "received_at", "description": "The timestamp at which this page view was received, presumably by the server, in the format of TIMESTAMP_NTZ(9) (or DATETIME).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The foreign key to the dim_user dimension. This column can be used to join the pageview fact table to the user dimension table to derive additional descriptive attributes about the user. Given the nature of how this column is populated, it is possible that there are some null values in this column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dwell_time_in_seconds": {"name": "dwell_time_in_seconds", "description": "The number of seconds between a given page view and the next page view in a session. This column will be null for the last page view in a session. Note that dwell time may not be an measure of active viewership on a page.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_view_ordinal_in_session": {"name": "page_view_ordinal_in_session", "description": "The ordinal / row number of a page view in its session, starting at 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "A surrogate key that uniquely identifies a browsing session of a single user.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/marts/marts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1681319450.7987788, "relation_name": "analytics.dev_marts.fact_page_view", "raw_code": "with stg_page_views as (select * from {{ ref('stg_page_views') }})\n\n-- Join to the user-identifier mapping table to derive the user_id: a foreign key to the user dimension in this table\n, next_page_view as (\n    select\n        {{ dbt_utils.generate_surrogate_key( \n            ['stg_page_views.user_identifier', 'stg_page_views.path', 'stg_page_views.received_at']\n        ) }} as page_view_id\n        , stg_page_views.path\n        , stg_page_views.received_at\n        , stg_page_views.user_identifier as user_id\n        \n        -- Calculate some facts\n        , lead(stg_page_views.received_at) over (\n            partition by stg_page_views.user_identifier\n            order by stg_page_views.received_at asc\n        ) as next_page_view_at\n    from stg_page_views\n)\n\n-- Partition up the page views into sessions\n-- Defined as a series of page views where no 2 consecutive page views are more than 30 minutes apart\n, calculate_session_id as (\n    select\n        page_view_id\n        , path\n        , received_at\n        , next_page_view_at\n        , user_id\n\n        -- Generate a new incrementing integer for each new session\n        , conditional_true_event(\n            datediff(\n                'minute'\n                , lag(received_at) over (\n                    partition by user_id \n                    order by received_at asc\n                )\n                , received_at\n            ) > 30\n        ) \n        over (\n            partition by user_id \n            order by received_at asc\n        ) as new_session_increment\n    from next_page_view\n)\n\n, final as (\n    select \n        page_view_id\n        , path\n        , received_at\n        \n        -- Some additional facts about the page view\n        , row_number() over (\n            partition by user_id, new_session_increment\n            order by received_at asc\n        ) as page_view_ordinal_in_session\n        , case\n            when \n                lead(new_session_increment) over (\n                    partition by user_id\n                    order by received_at asc\n                ) != new_session_increment \n                then null\n            else datediff('second', received_at, next_page_view_at)\n        end as dwell_time_in_seconds\n\n        -- Foreign keys at end of table\n        , path as web_page_id\n        , user_id\n        , {{ dbt_utils.generate_surrogate_key(\n            ['user_id', 'new_session_increment']\n        ) }} as session_id\n    from calculate_session_id\n)\n\nselect * from final", "language": "sql", "refs": [["stg_page_views"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.synthesia_challenge.stg_page_views"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/fact_page_view.sql", "compiled": true, "compiled_code": "with stg_page_views as (select * from analytics.dev_staging.stg_page_views)\n\n-- Join to the user-identifier mapping table to derive the user_id: a foreign key to the user dimension in this table\n, next_page_view as (\n    select\n        \n    \nmd5(cast(coalesce(cast(stg_page_views.user_identifier as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(stg_page_views.path as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(stg_page_views.received_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as page_view_id\n        , stg_page_views.path\n        , stg_page_views.received_at\n        , stg_page_views.user_identifier as user_id\n        \n        -- Calculate some facts\n        , lead(stg_page_views.received_at) over (\n            partition by stg_page_views.user_identifier\n            order by stg_page_views.received_at asc\n        ) as next_page_view_at\n    from stg_page_views\n)\n\n-- Partition up the page views into sessions\n-- Defined as a series of page views where no 2 consecutive page views are more than 30 minutes apart\n, calculate_session_id as (\n    select\n        page_view_id\n        , path\n        , received_at\n        , next_page_view_at\n        , user_id\n\n        -- Generate a new incrementing integer for each new session\n        , conditional_true_event(\n            datediff(\n                'minute'\n                , lag(received_at) over (\n                    partition by user_id \n                    order by received_at asc\n                )\n                , received_at\n            ) > 30\n        ) \n        over (\n            partition by user_id \n            order by received_at asc\n        ) as new_session_increment\n    from next_page_view\n)\n\n, final as (\n    select \n        page_view_id\n        , path\n        , received_at\n        \n        -- Some additional facts about the page view\n        , row_number() over (\n            partition by user_id, new_session_increment\n            order by received_at asc\n        ) as page_view_ordinal_in_session\n        , case\n            when \n                lead(new_session_increment) over (\n                    partition by user_id\n                    order by received_at asc\n                ) != new_session_increment \n                then null\n            else datediff('second', received_at, next_page_view_at)\n        end as dwell_time_in_seconds\n\n        -- Foreign keys at end of table\n        , path as web_page_id\n        , user_id\n        , \n    \nmd5(cast(coalesce(cast(user_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(new_session_increment as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as session_id\n    from calculate_session_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.int_weekly_active_users": {"database": "analytics", "schema": "dev_intermediate", "name": "int_weekly_active_users", "resource_type": "model", "package_name": "synthesia_challenge", "path": "intermediate/int_weekly_active_users.sql", "original_file_path": "models/intermediate/int_weekly_active_users.sql", "unique_id": "model.synthesia_challenge.int_weekly_active_users", "fqn": ["synthesia_challenge", "intermediate", "int_weekly_active_users"], "alias": "int_weekly_active_users", "checksum": {"name": "sha256", "checksum": "fdca7cc896b34bdcbeb0dd4032adf49489752f30120a2038f883e76e9baab47d"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model partitions user activity into weekly periods since the user was created, and flags if the user was active in that period. It is a helper model that will be used to generate user retetion models", "columns": {"user_cohort_week": {"name": "user_cohort_week", "description": "The starting date of the week in which the user was created (the created_at date): column taken from the user dimension. This will be used as a cohort group in a retention model, so that the activity of users of different creation times can be directly compared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique identifier for a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weeks_since_first_active": {"name": "weeks_since_first_active", "description": "The number of weeks since the user was created (the created_at date) in which there was pageview activity by the user. This is calculated by subtracting the page view received_at date from the user created_at date, and then dividing by 7 to get the number of weeks. This column is used as to form the definition of a user 'still being active' in that week.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_during_period": {"name": "active_during_period", "description": "A flag column which is set to 1 if the user was active during the week. As this model is formed by grouping up a users' page views, there will be no row for any weeks in which the user was not active, so this column will only have a value of 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cohort_size": {"name": "cohort_size", "description": "This column is a placeholder for unioning and is hard coded to null. It is kept null in this model to ensure that the final retention model can be aggregated at any level and the columns remain additive.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "intermediate"}, "created_at": 1681319450.831651, "relation_name": "analytics.dev_intermediate.int_weekly_active_users", "raw_code": "with page_view as (select * from {{ ref('fact_page_view') }})\n, users as (select * from {{ ref('dim_user') }})\n\n, weekly_activity as (\n    select \n        users.user_cohort_week\n        , users.user_id\n        , users.country\n        , users.age\n\n        -- Bucket the data into 'periods' / how many weeks after the user was created\n        , cast(\n            datediff(day, users.created_at, page_view.received_at) / 7 as int\n        ) as weeks_since_first_active\n\n        -- Flag this row as the user being active in the period, as there was at least 1 page view\n        -- Use a 1 rather than count of page views so that we can sum over this colum later on\n        , 1 as active_during_period\n        , null as cohort_size\n    from\n        page_view\n\n    -- Exclude records we can't map to the users table\n    -- This reduces the dataset we can work with, but is necessary if we want to examine the different user attributes\n    inner join users \n        on page_view.user_id = users.user_id\n    \n    -- There are some users who had page view activity before the timestamp of their user account being created\n    -- Ignore these cases: for this definition, we are only considering activity in the week of, or after the user has been 'acquired' via creating a user account\n    where\n        cast(datediff(day, users.created_at, page_view.received_at) / 7 as int)\n        >= 0\n    group by 1, 2, 3, 4, 5\n\n)\n\nselect * from weekly_activity", "language": "sql", "refs": [["fact_page_view"], ["dim_user"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.fact_page_view", "model.synthesia_challenge.dim_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/int_weekly_active_users.sql", "compiled": true, "compiled_code": "with page_view as (select * from analytics.dev_marts.fact_page_view)\n, users as (select * from analytics.dev_marts.dim_user)\n\n, weekly_activity as (\n    select \n        users.user_cohort_week\n        , users.user_id\n        , users.country\n        , users.age\n\n        -- Bucket the data into 'periods' / how many weeks after the user was created\n        , cast(\n            datediff(day, users.created_at, page_view.received_at) / 7 as int\n        ) as weeks_since_first_active\n\n        -- Flag this row as the user being active in the period, as there was at least 1 page view\n        -- Use a 1 rather than count of page views so that we can sum over this colum later on\n        , 1 as active_during_period\n        , null as cohort_size\n    from\n        page_view\n\n    -- Exclude records we can't map to the users table\n    -- This reduces the dataset we can work with, but is necessary if we want to examine the different user attributes\n    inner join users \n        on page_view.user_id = users.user_id\n    \n    -- There are some users who had page view activity before the timestamp of their user account being created\n    -- Ignore these cases: for this definition, we are only considering activity in the week of, or after the user has been 'acquired' via creating a user account\n    where\n        cast(datediff(day, users.created_at, page_view.received_at) / 7 as int)\n        >= 0\n    group by 1, 2, 3, 4, 5\n\n)\n\nselect * from weekly_activity", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.int_cohort_sizes": {"database": "analytics", "schema": "dev_intermediate", "name": "int_cohort_sizes", "resource_type": "model", "package_name": "synthesia_challenge", "path": "intermediate/int_cohort_sizes.sql", "original_file_path": "models/intermediate/int_cohort_sizes.sql", "unique_id": "model.synthesia_challenge.int_cohort_sizes", "fqn": ["synthesia_challenge", "intermediate", "int_cohort_sizes"], "alias": "int_cohort_sizes", "checksum": {"name": "sha256", "checksum": "37a5935ec9506a3c1635be48b16b71d53dc7d6fcd7f8e872e077a688a188d292"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model calculates the size of each cohort group (e.g. how many users were created in each week) per demographic attribute group, and is in the retention model.", "columns": {"user_cohort_week": {"name": "user_cohort_week", "description": "The starting date of the week in which the user was created (the created_at date): column taken from the user dimension. This will be used as a cohort group in a retention model, so that the activity of users of different creation times can be directly compared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cohort_size": {"name": "cohort_size", "description": "The count of users in the particular cohort group and combination of demongraphic attributes. Only users that have a non-null user_identifier (e.g. have been joined to the page view dataset) are included in this cohort count for consistency in the data set used in retention analysis.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "intermediate"}, "created_at": 1681319450.832486, "relation_name": "analytics.dev_intermediate.int_cohort_sizes", "raw_code": "with users as (select * from {{ ref('dim_user') }})\n\n, cohort_size as (\n    select \n        user_cohort_week\n        , country\n        , age\n        , count(distinct user_id) as cohort_size\n    from users\n    where user_id is not null\n    group by 1, 2, 3\n)\n\nselect * from cohort_size", "language": "sql", "refs": [["dim_user"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.dim_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/int_cohort_sizes.sql", "compiled": true, "compiled_code": "with users as (select * from analytics.dev_marts.dim_user)\n\n, cohort_size as (\n    select \n        user_cohort_week\n        , country\n        , age\n        , count(distinct user_id) as cohort_size\n    from users\n    where user_id is not null\n    group by 1, 2, 3\n)\n\nselect * from cohort_size", "extra_ctes_injected": true, "extra_ctes": []}, "model.synthesia_challenge.int_page_views_joined_to_user": {"database": "analytics", "schema": "dev_intermediate", "name": "int_page_views_joined_to_user", "resource_type": "model", "package_name": "synthesia_challenge", "path": "intermediate/int_page_views_joined_to_user.sql", "original_file_path": "models/intermediate/int_page_views_joined_to_user.sql", "unique_id": "model.synthesia_challenge.int_page_views_joined_to_user", "fqn": ["synthesia_challenge", "intermediate", "int_page_views_joined_to_user"], "alias": "int_page_views_joined_to_user", "checksum": {"name": "sha256", "checksum": "2a1e93e8a2537723c97607c17d529167eaaa1731437a247eff270d7f3e31127a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This intermediate model performs some logic to join the page view table to the users table. This is required because the user id in the page view table does not join directly to the users table, so the link between the pageview user identifier and the user table user_id must be inferred by the timestamp of a corresponding page view in the page views table.\n\nThere are a few page views that used as a proxy event for a user being created: any that are categorised in the dim_web_page dimension as being associated with account creation. This is based on an assumption that there are many different landing pages that will trigger a user account being created in the 'backend' user system. When using just a single account page (e.g. '/first-time-visit') as a proxy event for a user account being created, the match rate between page views and users was too low to be useful. So, many different page views are assessed and a match is attempted to the user system based on the timestamp of these events.", "columns": {"user_identifier": {"name": "user_identifier", "description": "The unique identifier for a user as found in the page views table. This identifier is a 36-character string of alphanumeric characters of UUID / GUID format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The user_id from the users table that corresponds to the user_identifier from the page view data set, according to a best attempt at matching based on the timestamp of a page view associated with account creation, and the created_at data in the users table. It is not a certain match, but rather a best guess.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "intermediate"}, "created_at": 1681319450.8300889, "relation_name": "analytics.dev_intermediate.int_page_views_joined_to_user", "raw_code": "with page_views as (select * from {{ ref('stg_page_views') }})\n, users as (select * from {{ ref('stg_users') }})\n, dim_web_page as (select * from {{ ref('dim_web_page') }})\n\n-- Identify the sign up events on the page view side\n-- so we can link the page view sign up event to the corresponding row in the users table\n, sign_up_page_views as (\n    select \n        page_views.user_identifier\n        , page_views.received_at\n    from page_views\n    left join dim_web_page\n        on page_views.path = dim_web_page.path\n\n    -- Limit to just page views on a set of paths related to account creation as a proxy for a user account being created \n    -- This is based on the understanding that a user account will be created in the \"back end\" / user management system shortly after a front end event on a set of pages related to account creation\n    where dim_web_page.page_category = 'account management'\n)\n\n, final as (\n    select \n        supv.user_identifier\n        , users.user_id\n    from users\n    left join\n        sign_up_page_views as supv\n\n        -- The only way to attempt to match users in the two systems is by the timestamp: in this case, allow for 65 seconds between the web page event and the user creation in the back end system\n        -- This is likely an overly generous time window, but even so only 40% of the users can be matched\n        on\n            timestampdiff(\n                second\n                , supv.received_at::timestamp\n                , users.created_at::timestamp\n            ) between -5 and 60\n    where supv.user_identifier is not null\n    group by 1, 2\n    \n    -- Deduplicate the matches so that the relationship between user_id and user_identifier is 1:1\n    qualify\n        row_number() over (\n            partition by users.user_id\n            order by supv.user_identifier asc\n        ) = 1  \n        and \n        row_number() over (\n            partition by supv.user_identifier\n            order by users.user_id asc\n        ) = 1  \n)\n\nselect * from final", "language": "sql", "refs": [["stg_page_views"], ["stg_users"], ["dim_web_page"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.stg_page_views", "model.synthesia_challenge.stg_users", "model.synthesia_challenge.dim_web_page"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/int_page_views_joined_to_user.sql", "compiled": true, "compiled_code": "with page_views as (select * from analytics.dev_staging.stg_page_views)\n, users as (select * from analytics.dev_staging.stg_users)\n, dim_web_page as (select * from analytics.dev_marts.dim_web_page)\n\n-- Identify the sign up events on the page view side\n-- so we can link the page view sign up event to the corresponding row in the users table\n, sign_up_page_views as (\n    select \n        page_views.user_identifier\n        , page_views.received_at\n    from page_views\n    left join dim_web_page\n        on page_views.path = dim_web_page.path\n\n    -- Limit to just page views on a set of paths related to account creation as a proxy for a user account being created \n    -- This is based on the understanding that a user account will be created in the \"back end\" / user management system shortly after a front end event on a set of pages related to account creation\n    where dim_web_page.page_category = 'account management'\n)\n\n, final as (\n    select \n        supv.user_identifier\n        , users.user_id\n    from users\n    left join\n        sign_up_page_views as supv\n\n        -- The only way to attempt to match users in the two systems is by the timestamp: in this case, allow for 65 seconds between the web page event and the user creation in the back end system\n        -- This is likely an overly generous time window, but even so only 40% of the users can be matched\n        on\n            timestampdiff(\n                second\n                , supv.received_at::timestamp\n                , users.created_at::timestamp\n            ) between -5 and 60\n    where supv.user_identifier is not null\n    group by 1, 2\n    \n    -- Deduplicate the matches so that the relationship between user_id and user_identifier is 1:1\n    qualify\n        row_number() over (\n            partition by users.user_id\n            order by supv.user_identifier asc\n        ) = 1  \n        and \n        row_number() over (\n            partition by supv.user_identifier\n            order by users.user_id asc\n        ) = 1  \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "seed.synthesia_challenge.countries": {"database": "analytics", "schema": "dev_raw", "name": "countries", "resource_type": "seed", "package_name": "synthesia_challenge", "path": "countries.csv", "original_file_path": "seeds/countries.csv", "unique_id": "seed.synthesia_challenge.countries", "fqn": ["synthesia_challenge", "countries"], "alias": "countries", "checksum": {"name": "sha256", "checksum": "50a9fd27d454abe241df59b27977f81864ee98e790e4bdacdf1e976243ff4de6"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw"}, "created_at": 1681319450.689364, "relation_name": "analytics.dev_raw.countries", "raw_code": "", "root_path": "/Users/emmahunt/repos/synthesia_challenge", "depends_on": {"macros": []}}, "seed.synthesia_challenge.users": {"database": "analytics", "schema": "dev_raw", "name": "users", "resource_type": "seed", "package_name": "synthesia_challenge", "path": "users.csv", "original_file_path": "seeds/users.csv", "unique_id": "seed.synthesia_challenge.users", "fqn": ["synthesia_challenge", "users"], "alias": "users", "checksum": {"name": "path", "checksum": "seeds/users.csv"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The raw user, loaded as a csv into a dbt seed.", "columns": {"USER_ID": {"name": "USER_ID", "description": "A unique identifier for an inidvidual user, and the primary key for this table. This column is a 24-character string of alphanumeric characters. In the current set of data, the user_ids all follow the pattern of starting with 'qqqqq' and ending with '=='.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "The timestamp at which this user account was created - there is no time zone information provided in the data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw"}, "created_at": 1681319450.747512, "relation_name": "analytics.dev_raw.users", "raw_code": "", "root_path": "/Users/emmahunt/repos/synthesia_challenge", "depends_on": {"macros": []}}, "seed.synthesia_challenge.pages_views": {"database": "analytics", "schema": "dev_raw", "name": "pages_views", "resource_type": "seed", "package_name": "synthesia_challenge", "path": "pages_views.csv", "original_file_path": "seeds/pages_views.csv", "unique_id": "seed.synthesia_challenge.pages_views", "fqn": ["synthesia_challenge", "pages_views"], "alias": "pages_views", "checksum": {"name": "path", "checksum": "seeds/pages_views.csv"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The raw user, loaded as a csv into a dbt seed.", "columns": {"NAME": {"name": "NAME", "description": "The name of the page where the view occured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVED_AT": {"name": "RECEIVED_AT", "description": "The timestamp at which this page view was received, presumably by the server. There does not appear to be any time zone information provided in the data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "USER_ID": {"name": "USER_ID", "description": "The unique identifier for a user, which is a 36-character string of alphanumeric characters in what appears to be UUID format. In the current set of data, all non-null user_id values follow the pattern of starting with 'aaaaaaaa-', presumably some anonymisation technique or an artefact of the system generating these IDs. There are some null values in this field: about 1% of the records.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw"}, "created_at": 1681319450.748703, "relation_name": "analytics.dev_raw.pages_views", "raw_code": "", "root_path": "/Users/emmahunt/repos/synthesia_challenge", "depends_on": {"macros": []}}, "model.metrics.dbt_metrics_default_calendar": {"database": "analytics", "schema": "dev", "name": "dbt_metrics_default_calendar", "resource_type": "model", "package_name": "metrics", "path": "dbt_metrics_default_calendar.sql", "original_file_path": "models/dbt_metrics_default_calendar.sql", "unique_id": "model.metrics.dbt_metrics_default_calendar", "fqn": ["metrics", "dbt_metrics_default_calendar"], "alias": "dbt_metrics_default_calendar", "checksum": {"name": "sha256", "checksum": "ceff0a953c0648d9c90dcface95c193f7a40f29bce75a902581315cd35f7141a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An auto generated calendar table that used for metrics.\n", "columns": {"DATE_DAY": {"name": "DATE_DAY", "description": "Date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE_WEEK": {"name": "DATE_WEEK", "description": "Date truncated into week", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE_MONTH": {"name": "DATE_MONTH", "description": "Date truncated into month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE_QUARTER": {"name": "DATE_QUARTER", "description": "Date truncated into quarter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATE_YEAR": {"name": "DATE_YEAR", "description": "Date truncated into year", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "metrics://models/dbt_metrics_default_calendar.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1681319450.8516731, "relation_name": "analytics.dev.dbt_metrics_default_calendar", "raw_code": "{{ config(materialized='table') }}\n\nwith days as (\n    {{ metrics.metric_date_spine(\n    datepart=\"day\",\n    start_date=\"cast('1990-01-01' as date)\",\n    end_date=\"cast('2030-01-01' as date)\"\n   )\n    }}\n),\n\nfinal as (\n    select \n        cast(date_day as date) as date_day,\n        cast({{ date_trunc('week', 'date_day') }} as date) as date_week,\n        cast({{ date_trunc('month', 'date_day') }} as date) as date_month,\n        cast({{ date_trunc('quarter', 'date_day') }} as date) as date_quarter,\n        cast({{ date_trunc('year', 'date_day') }} as date) as date_year\n    from days\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.metrics.metric_date_spine", "macro.dbt.date_trunc"], "nodes": []}, "compiled_path": "target/compiled/metrics/models/dbt_metrics_default_calendar.sql", "compiled": true, "compiled_code": "\n\nwith days as (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 14610\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('1990-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2030-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\n\nfinal as (\n    select \n        cast(date_day as date) as date_day,\n        cast(date_trunc('week', date_day) as date) as date_week,\n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('quarter', date_day) as date) as date_quarter,\n        cast(date_trunc('year', date_day) as date) as date_year\n    from days\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "test.synthesia_challenge.unique_users_USER_ID.8575ad02cd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "USER_ID", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_users_USER_ID", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_users_USER_ID.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.synthesia_challenge.unique_users_USER_ID.8575ad02cd", "fqn": ["synthesia_challenge", "unique_users_USER_ID"], "alias": "unique_users_USER_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.755143, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.synthesia_challenge.users"]}, "compiled_path": "target/compiled/synthesia_challenge/seeds/seeds.yml/unique_users_USER_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    USER_ID as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_raw.users\nwhere USER_ID is not null\ngroup by USER_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "USER_ID", "file_key_name": "seeds.users"}, "test.synthesia_challenge.not_null_users_USER_ID.4b4f3c9eea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "USER_ID", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_users_USER_ID", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_users_USER_ID.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.synthesia_challenge.not_null_users_USER_ID.4b4f3c9eea", "fqn": ["synthesia_challenge", "not_null_users_USER_ID"], "alias": "not_null_users_USER_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.756704, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.synthesia_challenge.users"]}, "compiled_path": "target/compiled/synthesia_challenge/seeds/seeds.yml/not_null_users_USER_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect USER_ID\nfrom analytics.dev_raw.users\nwhere USER_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "USER_ID", "file_key_name": "seeds.users"}, "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size.928ae6466d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_cohort_week", "country", "age", "weeks_since_first_active", "cohort_size"], "model": "{{ get_where_subquery(ref('user_retention')) }}"}, "namespace": "dbt_utils"}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size", "resource_type": "test", "package_name": "synthesia_challenge", "path": "dbt_utils_unique_combination_o_097a5519254c746487656455baf8cd63.sql", "original_file_path": "models/reporting/reporting.yml", "unique_id": "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size.928ae6466d", "fqn": ["synthesia_challenge", "reporting", "dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size"], "alias": "dbt_utils_unique_combination_o_097a5519254c746487656455baf8cd63", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_097a5519254c746487656455baf8cd63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_097a5519254c746487656455baf8cd63"}, "created_at": 1681319450.759964, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_097a5519254c746487656455baf8cd63\") }}", "language": "sql", "refs": [["user_retention"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.user_retention"]}, "compiled_path": "target/compiled/synthesia_challenge/models/reporting/reporting.yml/dbt_utils_unique_combination_o_097a5519254c746487656455baf8cd63.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_cohort_week, country, age, weeks_since_first_active, cohort_size\n    from analytics.dev_reporting.user_retention\n    group by user_cohort_week, country, age, weeks_since_first_active, cohort_size\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.user_retention"}, "test.synthesia_challenge.not_null_stg_page_views_path.b66d663583": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "path", "model": "{{ get_where_subquery(ref('stg_page_views')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_stg_page_views_path", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_stg_page_views_path.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.synthesia_challenge.not_null_stg_page_views_path.b66d663583", "fqn": ["synthesia_challenge", "staging", "not_null_stg_page_views_path"], "alias": "not_null_stg_page_views_path", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.78217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_page_views"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.stg_page_views"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/staging.yml/not_null_stg_page_views_path.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect path\nfrom analytics.dev_staging.stg_page_views\nwhere path is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "path", "file_key_name": "models.stg_page_views"}, "test.synthesia_challenge.not_null_stg_page_views_received_at.8ee35c9af0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_at", "model": "{{ get_where_subquery(ref('stg_page_views')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_stg_page_views_received_at", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_stg_page_views_received_at.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.synthesia_challenge.not_null_stg_page_views_received_at.8ee35c9af0", "fqn": ["synthesia_challenge", "staging", "not_null_stg_page_views_received_at"], "alias": "not_null_stg_page_views_received_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.783639, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_page_views"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.stg_page_views"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/staging.yml/not_null_stg_page_views_received_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect received_at\nfrom analytics.dev_staging.stg_page_views\nwhere received_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "received_at", "file_key_name": "models.stg_page_views"}, "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path.ff4cf7e4b3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["received_at", "user_identifier", "path"], "model": "{{ get_where_subquery(ref('stg_page_views')) }}"}, "namespace": "dbt_utils"}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path", "resource_type": "test", "package_name": "synthesia_challenge", "path": "dbt_utils_unique_combination_o_4cca844515d5fe72d1dbfb6316f86205.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path.ff4cf7e4b3", "fqn": ["synthesia_challenge", "staging", "dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path"], "alias": "dbt_utils_unique_combination_o_4cca844515d5fe72d1dbfb6316f86205", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4cca844515d5fe72d1dbfb6316f86205", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4cca844515d5fe72d1dbfb6316f86205"}, "created_at": 1681319450.785113, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4cca844515d5fe72d1dbfb6316f86205\") }}", "language": "sql", "refs": [["stg_page_views"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.stg_page_views"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/staging.yml/dbt_utils_unique_combination_o_4cca844515d5fe72d1dbfb6316f86205.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        received_at, user_identifier, path\n    from analytics.dev_staging.stg_page_views\n    group by received_at, user_identifier, path\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_page_views"}, "test.synthesia_challenge.unique_dim_user_user_id.eff0a2a278": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('dim_user')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_dim_user_user_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_dim_user_user_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.unique_dim_user_user_id.eff0a2a278", "fqn": ["synthesia_challenge", "marts", "unique_dim_user_user_id"], "alias": "unique_dim_user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.801095, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_user"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.dim_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/unique_dim_user_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_marts.dim_user\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_id", "file_key_name": "models.dim_user"}, "test.synthesia_challenge.not_null_dim_user_user_id.4b202b08a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('dim_user')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_dim_user_user_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_dim_user_user_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_dim_user_user_id.4b202b08a3", "fqn": ["synthesia_challenge", "marts", "not_null_dim_user_user_id"], "alias": "not_null_dim_user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.8025851, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_user"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.dim_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_dim_user_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom analytics.dev_marts.dim_user\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_id", "file_key_name": "models.dim_user"}, "test.synthesia_challenge.unique_fact_page_view_page_view_id.9c1b61693a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_fact_page_view_page_view_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_fact_page_view_page_view_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.unique_fact_page_view_page_view_id.9c1b61693a", "fqn": ["synthesia_challenge", "marts", "unique_fact_page_view_page_view_id"], "alias": "unique_fact_page_view_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.8040352, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/unique_fact_page_view_page_view_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    page_view_id as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_marts.fact_page_view\nwhere page_view_id is not null\ngroup by page_view_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "page_view_id", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.not_null_fact_page_view_page_view_id.f9dc4bcc61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_fact_page_view_page_view_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_fact_page_view_page_view_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_fact_page_view_page_view_id.f9dc4bcc61", "fqn": ["synthesia_challenge", "marts", "not_null_fact_page_view_page_view_id"], "alias": "not_null_fact_page_view_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.8056479, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_fact_page_view_page_view_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_id\nfrom analytics.dev_marts.fact_page_view\nwhere page_view_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "page_view_id", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.not_null_fact_page_view_path.d184998086": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "path", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_fact_page_view_path", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_fact_page_view_path.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_fact_page_view_path.d184998086", "fqn": ["synthesia_challenge", "marts", "not_null_fact_page_view_path"], "alias": "not_null_fact_page_view_path", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.807084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_fact_page_view_path.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect path\nfrom analytics.dev_marts.fact_page_view\nwhere path is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "path", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_.2cb1c985c3": {"test_metadata": {"name": "relationships_where", "kwargs": {"to": "ref('dim_web_page')", "field": "path", "column_name": "path", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": "dbt_utils"}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_", "resource_type": "test", "package_name": "synthesia_challenge", "path": "dbt_utils_relationships_where__b630a60619815bf6996d81880a168d00.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_.2cb1c985c3", "fqn": ["synthesia_challenge", "marts", "dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_"], "alias": "dbt_utils_relationships_where__b630a60619815bf6996d81880a168d00", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_relationships_where__b630a60619815bf6996d81880a168d00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_relationships_where__b630a60619815bf6996d81880a168d00"}, "created_at": 1681319450.808528, "relation_name": null, "raw_code": "{{ dbt_utils.test_relationships_where(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_relationships_where__b630a60619815bf6996d81880a168d00\") }}", "language": "sql", "refs": [["dim_web_page"], ["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_relationships_where", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.dim_web_page", "model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/dbt_utils_relationships_where__b630a60619815bf6996d81880a168d00.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    path as id\n\n  from analytics.dev_marts.fact_page_view\n\n  where path is not null\n    and 1=1\n\n),\n\nright_table as (\n\n  select\n    path as id\n\n  from analytics.dev_marts.dim_web_page\n\n  where path is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "path", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.not_null_fact_page_view_received_at.e74dc2358f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_at", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_fact_page_view_received_at", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_fact_page_view_received_at.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_fact_page_view_received_at.e74dc2358f", "fqn": ["synthesia_challenge", "marts", "not_null_fact_page_view_received_at"], "alias": "not_null_fact_page_view_received_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.815438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_fact_page_view_received_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect received_at\nfrom analytics.dev_marts.fact_page_view\nwhere received_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "received_at", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0.97e26290a0": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "inclusive": true, "column_name": "dwell_time_in_seconds", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": "dbt_utils"}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0", "resource_type": "test", "package_name": "synthesia_challenge", "path": "dbt_utils_accepted_range_fact__d5dd762fc0af2829c88f401b2a7e88cc.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0.97e26290a0", "fqn": ["synthesia_challenge", "marts", "dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0"], "alias": "dbt_utils_accepted_range_fact__d5dd762fc0af2829c88f401b2a7e88cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_fact__d5dd762fc0af2829c88f401b2a7e88cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_accepted_range_fact__d5dd762fc0af2829c88f401b2a7e88cc"}, "created_at": 1681319450.8168929, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_fact__d5dd762fc0af2829c88f401b2a7e88cc\") }}", "language": "sql", "refs": [["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/dbt_utils_accepted_range_fact__d5dd762fc0af2829c88f401b2a7e88cc.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from analytics.dev_marts.fact_page_view\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not dwell_time_in_seconds >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "dwell_time_in_seconds", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.not_null_fact_page_view_session_id.b4953b5f6c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('fact_page_view')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_fact_page_view_session_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_fact_page_view_session_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_fact_page_view_session_id.b4953b5f6c", "fqn": ["synthesia_challenge", "marts", "not_null_fact_page_view_session_id"], "alias": "not_null_fact_page_view_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.823688, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_page_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.fact_page_view"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_fact_page_view_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom analytics.dev_marts.fact_page_view\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "session_id", "file_key_name": "models.fact_page_view"}, "test.synthesia_challenge.unique_dim_web_page_web_page_id.5575cf9afb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "web_page_id", "model": "{{ get_where_subquery(ref('dim_web_page')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_dim_web_page_web_page_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_dim_web_page_web_page_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.unique_dim_web_page_web_page_id.5575cf9afb", "fqn": ["synthesia_challenge", "marts", "unique_dim_web_page_web_page_id"], "alias": "unique_dim_web_page_web_page_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.825134, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_web_page"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.dim_web_page"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/unique_dim_web_page_web_page_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    web_page_id as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_marts.dim_web_page\nwhere web_page_id is not null\ngroup by web_page_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "web_page_id", "file_key_name": "models.dim_web_page"}, "test.synthesia_challenge.not_null_dim_web_page_web_page_id.783e529bf8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "web_page_id", "model": "{{ get_where_subquery(ref('dim_web_page')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_dim_web_page_web_page_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_dim_web_page_web_page_id.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_dim_web_page_web_page_id.783e529bf8", "fqn": ["synthesia_challenge", "marts", "not_null_dim_web_page_web_page_id"], "alias": "not_null_dim_web_page_web_page_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.826567, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_web_page"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.dim_web_page"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_dim_web_page_web_page_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect web_page_id\nfrom analytics.dev_marts.dim_web_page\nwhere web_page_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "web_page_id", "file_key_name": "models.dim_web_page"}, "test.synthesia_challenge.not_null_dim_web_page_path.eebbde8d1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "path", "model": "{{ get_where_subquery(ref('dim_web_page')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_dim_web_page_path", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_dim_web_page_path.sql", "original_file_path": "models/marts/marts.yml", "unique_id": "test.synthesia_challenge.not_null_dim_web_page_path.eebbde8d1d", "fqn": ["synthesia_challenge", "marts", "not_null_dim_web_page_path"], "alias": "not_null_dim_web_page_path", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.828193, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_web_page"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.dim_web_page"]}, "compiled_path": "target/compiled/synthesia_challenge/models/marts/marts.yml/not_null_dim_web_page_path.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect path\nfrom analytics.dev_marts.dim_web_page\nwhere path is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "path", "file_key_name": "models.dim_web_page"}, "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_identifier.a75540fdbd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_identifier", "model": "{{ get_where_subquery(ref('int_page_views_joined_to_user')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_int_page_views_joined_to_user_user_identifier", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_int_page_views_joined_to_user_user_identifier.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_identifier.a75540fdbd", "fqn": ["synthesia_challenge", "intermediate", "unique_int_page_views_joined_to_user_user_identifier"], "alias": "unique_int_page_views_joined_to_user_user_identifier", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.833073, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_page_views_joined_to_user"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.int_page_views_joined_to_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/intermediate.yml/unique_int_page_views_joined_to_user_user_identifier.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_identifier as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_intermediate.int_page_views_joined_to_user\nwhere user_identifier is not null\ngroup by user_identifier\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_identifier", "file_key_name": "models.int_page_views_joined_to_user"}, "test.synthesia_challenge.not_null_int_page_views_joined_to_user_user_identifier.b504046e9b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_identifier", "model": "{{ get_where_subquery(ref('int_page_views_joined_to_user')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_int_page_views_joined_to_user_user_identifier", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_int_page_views_joined_to_user_user_identifier.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.synthesia_challenge.not_null_int_page_views_joined_to_user_user_identifier.b504046e9b", "fqn": ["synthesia_challenge", "intermediate", "not_null_int_page_views_joined_to_user_user_identifier"], "alias": "not_null_int_page_views_joined_to_user_user_identifier", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.834728, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_page_views_joined_to_user"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.int_page_views_joined_to_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/intermediate.yml/not_null_int_page_views_joined_to_user_user_identifier.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_identifier\nfrom analytics.dev_intermediate.int_page_views_joined_to_user\nwhere user_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_identifier", "file_key_name": "models.int_page_views_joined_to_user"}, "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_id.026d66bc30": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('int_page_views_joined_to_user')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_int_page_views_joined_to_user_user_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_int_page_views_joined_to_user_user_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_id.026d66bc30", "fqn": ["synthesia_challenge", "intermediate", "unique_int_page_views_joined_to_user_user_id"], "alias": "unique_int_page_views_joined_to_user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681319450.836193, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_page_views_joined_to_user"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.int_page_views_joined_to_user"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/intermediate.yml/unique_int_page_views_joined_to_user_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_intermediate.int_page_views_joined_to_user\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_id", "file_key_name": "models.int_page_views_joined_to_user"}, "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active.39515bd1db": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_cohort_week", "user_id", "country", "age", "weeks_since_first_active"], "model": "{{ get_where_subquery(ref('int_weekly_active_users')) }}"}, "namespace": "dbt_utils"}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active", "resource_type": "test", "package_name": "synthesia_challenge", "path": "dbt_utils_unique_combination_o_faafd750b5193c7d22265c23c3900385.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active.39515bd1db", "fqn": ["synthesia_challenge", "intermediate", "dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active"], "alias": "dbt_utils_unique_combination_o_faafd750b5193c7d22265c23c3900385", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_faafd750b5193c7d22265c23c3900385", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_faafd750b5193c7d22265c23c3900385"}, "created_at": 1681319450.837651, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_faafd750b5193c7d22265c23c3900385\") }}", "language": "sql", "refs": [["int_weekly_active_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.int_weekly_active_users"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_faafd750b5193c7d22265c23c3900385.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_cohort_week, user_id, country, age, weeks_since_first_active\n    from analytics.dev_intermediate.int_weekly_active_users\n    group by user_cohort_week, user_id, country, age, weeks_since_first_active\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_weekly_active_users"}, "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age.f12b4aa0ce": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_cohort_week", "country", "age"], "model": "{{ get_where_subquery(ref('int_cohort_sizes')) }}"}, "namespace": "dbt_utils"}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age", "resource_type": "test", "package_name": "synthesia_challenge", "path": "dbt_utils_unique_combination_o_afec5b0526454f689cbd659dd259dba7.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age.f12b4aa0ce", "fqn": ["synthesia_challenge", "intermediate", "dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age"], "alias": "dbt_utils_unique_combination_o_afec5b0526454f689cbd659dd259dba7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_afec5b0526454f689cbd659dd259dba7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_afec5b0526454f689cbd659dd259dba7"}, "created_at": 1681319450.842626, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_afec5b0526454f689cbd659dd259dba7\") }}", "language": "sql", "refs": [["int_cohort_sizes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.int_cohort_sizes"]}, "compiled_path": "target/compiled/synthesia_challenge/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_afec5b0526454f689cbd659dd259dba7.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_cohort_week, country, age\n    from analytics.dev_intermediate.int_cohort_sizes\n    group by user_cohort_week, country, age\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_cohort_sizes"}, "model.synthesia_challenge.stg_users": {"database": "analytics", "schema": "dev_staging", "name": "stg_users", "resource_type": "model", "package_name": "synthesia_challenge", "path": "staging/stg_users.sql", "original_file_path": "models/staging/stg_users.sql", "unique_id": "model.synthesia_challenge.stg_users", "fqn": ["synthesia_challenge", "staging", "stg_users"], "alias": "stg_users", "checksum": {"name": "sha256", "checksum": "2f425047ce3a279568b69bb34e478b9613d96f7db5ea297d4aa08d876c7ed14e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The staging model for raw page view data. This model performs some simple data cleansing and column renaming so that all downstream models use a consistently-formatted version of this data, and there is no need for repetition in multiple models.", "columns": {"user_id": {"name": "user_id", "description": "A unique identifier for an inidvidual user, and the primary key for this table. This column is a 24-character string of alphanumeric characters. In the current set of data, the user_ids all follow the pattern of starting with 'qqqqq' and ending with '=='. Presumably, this is some anonymisation technique or perhaps an artefact of the system that generates these records.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp at which this user account was created, in the format TIMESTAMP_NTZ(9) (or DATETIME). This is a date and time without timezone information. The range of dates in this column is from 2021-10-21 until 2023-01-26, with some null values present.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "synthesia_challenge://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging"}, "created_at": 1681320244.974644, "relation_name": "analytics.dev_staging.stg_users", "raw_code": "with raw_data as (\n    select\n        user_identifier as user_id\n        , min(received_at) as created_at\n    from {{ ref('stg_page_views') }}\n    group by 1\n)\n\n, generate_demographic_data as (\n    select\n        user_id\n        , created_at\n        , uniform(13, 100, random()) as age\n        , uniform(0, 250, random()) as country_id\n    from raw_data\n)\n\n, final as (\n    select \n        generate_demographic_data.user_id\n        , generate_demographic_data.created_at\n        , generate_demographic_data.age\n        , stg_countries.country_name\n    from generate_demographic_data\n    left join {{ ref('stg_countries') }}\n        on generate_demographic_data.country_id = stg_countries.country_id\n)\n\nselect * from final", "language": "sql", "refs": [["stg_page_views"], ["stg_countries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.stg_page_views", "model.synthesia_challenge.stg_countries"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/stg_users.sql", "compiled": true, "compiled_code": "with raw_data as (\n    select\n        user_identifier as user_id\n        , min(received_at) as created_at\n    from analytics.dev_staging.stg_page_views\n    group by 1\n)\n\n, generate_demographic_data as (\n    select\n        user_id\n        , created_at\n        , uniform(13, 100, random()) as age\n        , uniform(0, 250, random()) as country_id\n    from raw_data\n)\n\n, final as (\n    select \n        generate_demographic_data.user_id\n        , generate_demographic_data.created_at\n        , generate_demographic_data.age\n        , stg_countries.country_name\n    from generate_demographic_data\n    left join analytics.dev_staging.stg_countries\n        on generate_demographic_data.country_id = stg_countries.country_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": []}, "test.synthesia_challenge.unique_stg_users_user_id.c2ff477e6b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_users')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "unique_stg_users_user_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "unique_stg_users_user_id.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.synthesia_challenge.unique_stg_users_user_id.c2ff477e6b", "fqn": ["synthesia_challenge", "staging", "unique_stg_users_user_id"], "alias": "unique_stg_users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681320244.981129, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.stg_users"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/staging.yml/unique_stg_users_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom analytics.dev_staging.stg_users\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_id", "file_key_name": "models.stg_users"}, "test.synthesia_challenge.not_null_stg_users_user_id.980dfc1b77": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_users')) }}"}, "namespace": null}, "database": "analytics", "schema": "dev_dbt_test__audit", "name": "not_null_stg_users_user_id", "resource_type": "test", "package_name": "synthesia_challenge", "path": "not_null_stg_users_user_id.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.synthesia_challenge.not_null_stg_users_user_id.980dfc1b77", "fqn": ["synthesia_challenge", "staging", "not_null_stg_users_user_id"], "alias": "not_null_stg_users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681320244.982805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_users"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthesia_challenge.stg_users"]}, "compiled_path": "target/compiled/synthesia_challenge/models/staging/staging.yml/not_null_stg_users_user_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom analytics.dev_staging.stg_users\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "user_id", "file_key_name": "models.stg_users"}}, "sources": {"source.synthesia_challenge.countries.openaddress": {"database": "worldwide_address_data", "schema": "address", "name": "openaddress", "resource_type": "source", "package_name": "synthesia_challenge", "path": "models/staging/staging.yml", "original_file_path": "models/staging/staging.yml", "unique_id": "source.synthesia_challenge.countries.openaddress", "fqn": ["synthesia_challenge", "staging", "countries", "openaddress"], "source_name": "countries", "source_description": "", "loader": "", "identifier": "openaddress", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "worldwide_address_data.address.openaddress", "created_at": 1681319450.852135}}, "macros": {"macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.507339, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.52973, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.530956, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.531414, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.532759, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.533003, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.534254, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.535159, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5359738, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.536513, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.536822, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5372422, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.537576, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.538424, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5387158, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.538977, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.539745, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5400388, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.540823, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5421062, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.542453, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.542839, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.543287, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5434618, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.544019, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.545932, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5464199, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.546836, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5502741, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.550766, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.55166, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.555506, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.555857, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.556014, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5600011, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.565491, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5657558, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.566325, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5667682, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.567053, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.567223, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5673869, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.567596, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.567952, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5683131, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.568585, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5687969, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.569078, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.570785, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5710962, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.571321, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5715551, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.571786, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.572362, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.572845, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.573344, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.574023, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5744588, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5801759, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5804522, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.580828, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.582019, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.582282, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.582561, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.585063, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.588347, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5955682, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5960839, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.596384, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.596543, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.596801, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.597002, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.597365, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.599083, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.5996, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.6001291, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.6010072, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.674717, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.678506, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.6793878, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.67995, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.680609, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.681291, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.684335, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.6854389, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.687266, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.6878002, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.689139, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.700145, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.703671, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.704222, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.706555, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.707222, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.708724, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.709912, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7114382, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.711864, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.712199, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7127209, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.713055, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.713577, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.71391, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7144089, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.714852, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7152, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.715729, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.724393, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.733726, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.735942, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.738074, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.739582, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.744034, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.744905, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.745227, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7459872, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.746727, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.751519, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.752146, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.752545, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7553122, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7560031, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.756288, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.756601, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.757055, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.762688, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.770784, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.772366, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.772775, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.773611, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7739468, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.774179, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.77442, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.774616, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.774889, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.775093, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.775931, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7762508, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7783859, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.779045, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7794402, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.780304, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.780752, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7812428, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7819169, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.782342, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.783254, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.784468, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7850182, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7862039, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7887511, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.78977, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.790289, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.79338, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7955232, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.796854, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.797269, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.797657, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.797781, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.798311, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.798592, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7990038, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.799211, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7996328, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.7998238, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.800378, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.800648, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.80102, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.801151, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8015842, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.801829, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.802329, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.802581, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8037949, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.804524, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.805108, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.805395, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.805896, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.80613, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8065631, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.806837, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.807254, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.807531, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.807965, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8081448, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.808643, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.808874, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.809304, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.809481, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.812233, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.812511, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.812803, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.813069, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8133702, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8136399, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.81392, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8143559, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.814647, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.814914, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.81519, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.815448, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.815726, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.815979, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.816482, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.816712, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.817132, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.817311, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.817896, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.818367, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8186262, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.81952, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.819804, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8202019, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.820666, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8208902, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.821552, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8219788, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.822457, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8226812, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.823305, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.823618, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.824033, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.824349, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.825174, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.825443, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.825686, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.825873, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.826159, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.826293, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8265831, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.826874, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8276448, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.827889, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8281758, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8290198, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.834485, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.83478, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8351622, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.835677, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8361018, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.836656, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.836978, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.837344, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.837653, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.838078, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.838451, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8389518, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.839391, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8403578, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.84076, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8410082, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8413508, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.842072, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8428211, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.845609, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.845809, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.846102, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.846299, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.846894, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.847202, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.847369, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8477418, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.848057, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.848434, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.848754, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8491662, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.850467, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.850786, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8511748, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8515682, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.853547, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.854708, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.855006, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.855354, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.855642, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.856101, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8569338, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.859435, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.85988, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8602061, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8604748, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.860794, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.861205, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8615649, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.862092, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.862412, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.862701, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.865539, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8658218, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8663769, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.866706, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.867672, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.86817, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.869292, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8697689, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.871116, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8733969, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8736699, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.874357, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.875044, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.87652, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8776162, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.877773, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8787131, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8791292, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.87963, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.880119, "supported_languages": null}, "macro.metrics.develop": {"name": "develop", "resource_type": "macro", "package_name": "metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "unique_id": "macro.metrics.develop", "macro_sql": "{%- macro develop(develop_yml, metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) -%}\n    {{ return(adapter.dispatch('develop', 'metrics')(develop_yml, metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where, date_alias)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.metrics.default__develop"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.88188, "supported_languages": null}, "macro.metrics.default__develop": {"name": "default__develop", "resource_type": "macro", "package_name": "metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "unique_id": "macro.metrics.default__develop", "macro_sql": "{% macro default__develop(develop_yml, metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) -%}\n    {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n    -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n\n    {% if not execute -%}\n        {%- do return(\"not execute\") -%}\n    {%- endif %}\n\n    {%- if metric_list is string -%}\n        {%- set metric_list = [metric_list] -%}\n    {%- endif -%}\n\n    {# For the sake of consistency with metrics definition and the ability to easily\n    reference the metric object, we are creating a metrics_dictionary for set of metrics\n    included in the provided yml. This is used to construct the metric tree #}\n    {%- set develop_yml = fromyaml(develop_yml) -%}\n\n    {% set develop_dictionary = {} %}\n    {% for metric_definition in develop_yml.metrics %}\n        {% do develop_dictionary.update({metric_definition.name:{}}) %}\n        {% do develop_dictionary.update({metric_definition.name:metric_definition}) %}\n    {% endfor %}\n    {% set develop_yml = develop_dictionary %}\n\n    {# ############\n    VALIDATION OF PROVIDED YML - Gotta make sure the metric looks good!\n    ############ #}\n\n    {%- do metrics.validate_develop_metrics(metric_list=metric_list, develop_yml=develop_yml) -%}\n\n    {# ############\n    VARIABLE SETTING - Creating the faux metric tree and faux metric list. The faux fur of 2022\n    ############ #}\n\n    {% set metric_tree = metrics.get_faux_metric_tree(metric_list=metric_list, develop_yml=develop_yml) %}\n\n    {% set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree, develop_yml=develop_yml) %}\n\n    {# ############\n    SECONDARY VALIDATION - Gotta make sure everything else is good!\n    ############ #}\n\n    {%- do metrics.validate_timestamp(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, dimensions=dimensions) -%}\n\n    {%- do metrics.validate_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n    \n    {%- do metrics.validate_dimension_list(dimensions=dimensions, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary) -%} \n\n    {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%}\n\n    {%- do metrics.validate_secondary_calculations(metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, grain=grain, secondary_calculations=secondary_calculations) -%} \n\n    {%- do metrics.validate_where(where=where) -%} \n\n    {%- do metrics.validate_calendar_model() -%}\n\n\n    {# ############\n    SQL GENERATION - Lets build that SQL!\n    ############ -#}\n\n    {%- set sql = metrics.get_metric_sql(\n        metrics_dictionary=metrics_dictionary,\n        grain=grain,\n        dimensions=dimensions,\n        secondary_calculations=secondary_calculations,\n        start_date=start_date,\n        end_date=end_date,\n        where=where,\n        date_alias=date_alias,\n        metric_tree=metric_tree\n        ) %}\n    ({{ sql }}) metric_subq\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.metrics.validate_develop_metrics", "macro.metrics.get_faux_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_timestamp", "macro.metrics.validate_grain", "macro.metrics.validate_dimension_list", "macro.metrics.validate_metric_config", "macro.metrics.validate_secondary_calculations", "macro.metrics.validate_where", "macro.metrics.validate_calendar_model", "macro.metrics.get_metric_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.8861141, "supported_languages": null}, "macro.metrics.calculate": {"name": "calculate", "resource_type": "macro", "package_name": "metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "unique_id": "macro.metrics.calculate", "macro_sql": "{% macro calculate(metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) %}\n    {{ return(adapter.dispatch('calculate', 'metrics')(metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where, date_alias)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__calculate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.888541, "supported_languages": null}, "macro.metrics.default__calculate": {"name": "default__calculate", "resource_type": "macro", "package_name": "metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "unique_id": "macro.metrics.default__calculate", "macro_sql": "{% macro default__calculate(metric_list, grain=none, dimensions=[], secondary_calculations=[], start_date=none, end_date=none, where=none, date_alias=none) %}\n    {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n    -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n    \n    {#- ############\n    VARIABLE SETTING - Creating the metric tree and making sure metric list is a list!\n    ############ -#}\n\n    {%- if metric_list is not iterable -%}\n        {%- set metric_list = [metric_list] -%}\n    {%- endif -%}\n\n    {%- set metric_tree = metrics.get_metric_tree(metric_list=metric_list) -%}\n\n    {#- Here we are creating the metrics dictionary which contains all of the metric information needed for sql gen. -#}\n    {%- set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree) -%}\n\n    {#- ############\n    VALIDATION - Make sure everything is good!\n    ############ -#}\n\n    {%- if not execute -%}\n        {%- do return(\"Did not execute\") -%}\n    {%- endif -%}\n\n    {%- if not metric_list -%}\n        {%- do exceptions.raise_compiler_error(\"No metric or metrics provided\") -%}\n    {%- endif -%}\n\n    {%- do metrics.validate_timestamp(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, dimensions=dimensions) -%}\n\n    {%- do metrics.validate_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n\n    {%- do metrics.validate_derived_metrics(metric_tree=metric_tree) -%}\n\n    {%- do metrics.validate_dimension_list(dimensions=dimensions, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary) -%} \n\n    {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%} \n\n    {%- do metrics.validate_where(where=where) -%} \n\n    {%- do metrics.validate_secondary_calculations(metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, grain=grain, secondary_calculations=secondary_calculations) -%} \n\n    {%- do metrics.validate_calendar_model() -%}\n\n    {#- ############\n    SQL GENERATION - Lets build that SQL!\n    ############ -#}\n\n    {%- set sql = metrics.get_metric_sql(\n        metrics_dictionary=metrics_dictionary,\n        grain=grain,\n        dimensions=dimensions,\n        secondary_calculations=secondary_calculations,\n        start_date=start_date,\n        end_date=end_date,\n        where=where,\n        date_alias=date_alias,\n        metric_tree=metric_tree\n    ) %}\n\n({{ sql }}) metric_subq \n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.get_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_timestamp", "macro.metrics.validate_grain", "macro.metrics.validate_derived_metrics", "macro.metrics.validate_dimension_list", "macro.metrics.validate_metric_config", "macro.metrics.validate_where", "macro.metrics.validate_secondary_calculations", "macro.metrics.validate_calendar_model", "macro.metrics.get_metric_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.891952, "supported_languages": null}, "macro.metrics.get_metric_sql": {"name": "get_metric_sql", "resource_type": "macro", "package_name": "metrics", "path": "macros/get_metric_sql.sql", "original_file_path": "macros/get_metric_sql.sql", "unique_id": "macro.metrics.get_metric_sql", "macro_sql": "{%- macro get_metric_sql(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, where, date_alias, metric_tree) %}\n\n{#- ############\nMost validation occurs in calculate and develop - please reference there for validation\n############ -#}\n\n{#- ############\nLETS SET SOME VARIABLES!\n############ -#}\n\n{#- We have to break out calendar dimensions as their own list of acceptable dimensions. \nThis is because of the date-spining. If we don't do this, it creates impossible combinations\nof calendar dimension + base dimensions -#}\n{%- set calendar_dimensions = metrics.get_calendar_dimensions(dimensions) -%}\n\n{#- Additionally, we also have to restrict the dimensions coming in from the macro to \nno longer include those we've designated as calendar dimensions. That way they \nare correctly handled by the spining. We override the dimensions variable for \ncleanliness -#}\n{%- set non_calendar_dimensions = metrics.get_non_calendar_dimension_list(dimensions, var('custom_calendar_dimension_list',[])) -%}\n\n{#- Finally we set the relevant periods, which is a list of all time grains that need to be contained\nwithin the final dataset in order to accomplish base + secondary calc functionality. -#}\n{%- set relevant_periods = metrics.get_relevent_periods(grain, secondary_calculations) -%}\n\n{#- Setting a variable to denote if the user has provided any dimensions -#}\n{%- if non_calendar_dimensions | length > 0 -%}\n    {%- set dimensions_provided = true -%}\n{%- else -%}\n    {%- set dimensions_provided = false -%}\n{%- endif -%}\n\n{#- Here we set the calendar table as a variable, which ensures the default overwritten if they include\na custom calendar -#}\n{%- set calendar_tbl = ref(var('dbt_metrics_calendar_model', \"dbt_metrics_default_calendar\")) -%}\n\n{#- Here we get the total dimension count for grouping -#}\n{%- set total_dimension_count = metrics.get_total_dimension_count(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n\n{#- Here we are creating the metric grouping that we use to determine if metrics can be pulled from the same base query -#}\n{%- set models_grouping = metrics.get_models_grouping(metric_tree=metric_tree,metrics_dictionary=metrics_dictionary) -%}\n{#- ############\nLET THE COMPOSITION BEGIN!\n############ -#}\n\n{#- First we add the calendar table - we only need to do this once no matter how many\nmetrics there are -#}\n{{ metrics.gen_calendar_cte(\n    calendar_tbl=calendar_tbl,\n    start_date=start_date, \n    end_date=end_date) \n    }}\n{#- Next we check if it is a composite metric or single metric by checking the length of the list -#}\n{#- This filter forms the basis of how we construct the SQL -#}\n{#- If composite, we begin by looping through each of the metric names that make\nup the composite metric. -#}\n\n{%- for group_name, group_values in models_grouping.items() -%}\n\n    {{ metrics.build_metric_sql(\n        metrics_dictionary=metrics_dictionary, \n        grain=grain, \n        dimensions=non_calendar_dimensions, \n        secondary_calculations=secondary_calculations, \n        start_date=start_date, \n        end_date=end_date,\n        relevant_periods=relevant_periods,\n        calendar_dimensions=calendar_dimensions,\n        dimensions_provided=dimensions_provided,\n        total_dimension_count=total_dimension_count,\n        group_name=group_name,\n        group_values=group_values\n        ) \n    }}\n\n{%- endfor -%}\n\n{%- if models_grouping| length > 1 or metric_tree['derived_set'] | length > 0 -%}\n\n    {{ metrics.gen_joined_metrics_cte(\n        metric_tree=metric_tree,\n        metrics_dictionary=metrics_dictionary,\n        models_grouping=models_grouping,\n        grain=grain, \n        dimensions=non_calendar_dimensions, \n        calendar_dimensions=calendar_dimensions, \n        secondary_calculations=secondary_calculations, \n        relevant_periods=relevant_periods,\n        total_dimension_count=total_dimension_count ) \n    }}\n\n{%- endif -%}\n\n{{ metrics.gen_final_cte(\n    metric_tree=metric_tree,\n    metrics_dictionary=metrics_dictionary,\n    models_grouping=models_grouping,\n    grain=grain, \n    dimensions=non_calendar_dimensions, \n    calendar_dimensions=calendar_dimensions, \n    relevant_periods=relevant_periods,\n    secondary_calculations=secondary_calculations,\n    where=where,\n    date_alias=date_alias) \n    }} \n\n{%- endmacro %}", "depends_on": {"macros": ["macro.metrics.get_calendar_dimensions", "macro.metrics.get_non_calendar_dimension_list", "macro.metrics.get_relevent_periods", "macro.metrics.get_total_dimension_count", "macro.metrics.get_models_grouping", "macro.metrics.gen_calendar_cte", "macro.metrics.build_metric_sql", "macro.metrics.gen_joined_metrics_cte", "macro.metrics.gen_final_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.898187, "supported_languages": null}, "macro.metrics.metric_date_spine": {"name": "metric_date_spine", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_date_spine", "macro_sql": "{% macro metric_date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('metric_date_spine', 'metrics')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.metrics.default__metric_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.900924, "supported_languages": null}, "macro.metrics.default__metric_date_spine": {"name": "default__metric_date_spine", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_date_spine", "macro_sql": "{% macro default__metric_date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\nmetric_date_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{metrics.metric_generate_series(14610)}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.metric_generate_series", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.901493, "supported_languages": null}, "macro.metrics.metric_get_powers_of_two": {"name": "metric_get_powers_of_two", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_get_powers_of_two", "macro_sql": "{% macro metric_get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('metric_get_powers_of_two', 'metrics')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__metric_get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9018161, "supported_languages": null}, "macro.metrics.default__metric_get_powers_of_two": {"name": "default__metric_get_powers_of_two", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_get_powers_of_two", "macro_sql": "{% macro default__metric_get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.902538, "supported_languages": null}, "macro.metrics.metric_generate_series": {"name": "metric_generate_series", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.metric_generate_series", "macro_sql": "{% macro metric_generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('metric_generate_series', 'metrics')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__metric_generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9028962, "supported_languages": null}, "macro.metrics.default__metric_generate_series": {"name": "default__metric_generate_series", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "unique_id": "macro.metrics.default__metric_generate_series", "macro_sql": "{% macro default__metric_generate_series(upper_bound) %}\n\n    {% set n = metrics.metric_get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.metric_get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.90397, "supported_languages": null}, "macro.metrics.test_metric_equality": {"name": "test_metric_equality", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics.test_metric_equality", "macro_sql": "{% test metric_equality(model, compare_model, compare_columns=none) %}\n  {{ return(adapter.dispatch('test_metric_equality', 'metrics')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.metrics.default__test_metric_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.906541, "supported_languages": null}, "macro.metrics.default__test_metric_equality": {"name": "default__test_metric_equality", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics.default__test_metric_equality", "macro_sql": "{% macro default__test_metric_equality(model, compare_model, compare_columns=none) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do metrics._metric_is_relation(model, 'test_metric_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do metrics._metric_is_ephemeral(model, 'test_metric_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics._metric_is_relation", "macro.metrics._metric_is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.908484, "supported_languages": null}, "macro.metrics._metric_is_relation": {"name": "_metric_is_relation", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics._metric_is_relation", "macro_sql": "{% macro _metric_is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.909177, "supported_languages": null}, "macro.metrics._metric_is_ephemeral": {"name": "_metric_is_ephemeral", "resource_type": "macro", "package_name": "metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "unique_id": "macro.metrics._metric_is_ephemeral", "macro_sql": "{% macro _metric_is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.910204, "supported_languages": null}, "macro.metrics.get_metric_relation": {"name": "get_metric_relation", "resource_type": "macro", "package_name": "metrics", "path": "macros/graph_parsing/get_metric_relation.sql", "original_file_path": "macros/graph_parsing/get_metric_relation.sql", "unique_id": "macro.metrics.get_metric_relation", "macro_sql": "{% macro get_metric_relation(ref_name) %}\n    \n    {% if execute %}\n        {% set relation = metric(ref_name)%}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %} \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9109278, "supported_languages": null}, "macro.metrics.get_model_relation": {"name": "get_model_relation", "resource_type": "macro", "package_name": "metrics", "path": "macros/graph_parsing/get_model_relation.sql", "original_file_path": "macros/graph_parsing/get_model_relation.sql", "unique_id": "macro.metrics.get_model_relation", "macro_sql": "{% macro get_model_relation(ref_name, metric_name=None) %}\n    \n    {% if execute %}\n        {% set model_ref_node = graph.nodes.values() | selectattr('name', 'equalto', ref_name) | first %}\n        {% if model_ref_node | length == 0 %}\n            {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is referencing the model \" ~ ref_name ~ \", which does not exist.\") %}\n        {% endif %}\n\n        {% set relation = api.Relation.create(\n            database = model_ref_node.database,\n            schema = model_ref_node.schema,\n            identifier = model_ref_node.alias\n        )\n        %}\n\n        {% if model_ref_node.config.materialized == \"ephemeral\" %}\n            {%- do exceptions.raise_compiler_error(\"The resource \" ~ relation.name ~ \" is an ephemeral model which is not supported\") %}\n        {% endif%}\n\n        {% do return(relation) %}\n\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.912972, "supported_languages": null}, "macro.metrics.default__secondary_calculation_rolling": {"name": "default__secondary_calculation_rolling", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "unique_id": "macro.metrics.default__secondary_calculation_rolling", "macro_sql": "{%- macro default__secondary_calculation_rolling(metric_name, grain, dimensions, calc_config) %}\n    {%- set calc_sql -%}\n    {{ adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) }} over (\n            {% if dimensions -%}\n            partition by {{ dimensions | join(\", \") }} \n            {%- endif %}\n            order by date_{{grain}}\n            {%- if calc_config.interval %}\n            rows between {{ calc_config.interval - 1 }} preceding and current row\n            {%- else %}\n            rows between unbounded preceding and current row\n            {%- endif %}\n        )\n    {%- endset %}\n    {% do return (calc_sql) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9143271, "supported_languages": null}, "macro.metrics.default__secondary_calculation_period_to_date": {"name": "default__secondary_calculation_period_to_date", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "unique_id": "macro.metrics.default__secondary_calculation_period_to_date", "macro_sql": "{% macro default__secondary_calculation_period_to_date(metric_name, grain, dimensions, calc_config) %}\n    {%- set calc_sql -%}\n        {{- adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) -}} over (\n            partition by date_{{ calc_config.period }}{% if dimensions -%}, {{ dimensions | join(\", \") }}{%- endif %}\n            order by date_{{grain}}\n            rows between unbounded preceding and current row\n        )\n    {%- endset %}\n    {%- do return (calc_sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.915367, "supported_languages": null}, "macro.metrics.default__secondary_calculation_period_over_period": {"name": "default__secondary_calculation_period_over_period", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "unique_id": "macro.metrics.default__secondary_calculation_period_over_period", "macro_sql": "{%- macro default__secondary_calculation_period_over_period(metric_name, grain, dimensions, calc_config, metric_config) -%}\n    {%- set calc_sql %}\n            lag({{ metric_name }}, {{ calc_config.interval }}) over (\n                {%- if dimensions %}\n                    partition by {{ dimensions | join(\", \") }} \n                {%- endif %}\n                order by date_{{grain}}\n            )\n    {%- endset-%}\n    \n    {%- if calc_config.comparison_strategy == 'difference' -%}\n        {% do return (adapter.dispatch('metric_comparison_strategy_difference', 'metrics')(metric_name, calc_sql, metric_config)) %}\n    \n    {%- elif calc_config.comparison_strategy == 'ratio' -%}\n        {% do return (adapter.dispatch('metric_comparison_strategy_ratio', 'metrics')(metric_name, calc_sql, metric_config)) %}\n    \n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"Bad comparison_strategy for period_over_period: \" ~ calc_config.comparison_strategy ~ \". calc_config: \" ~ calc_config) %}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__metric_comparison_strategy_difference", "macro.metrics.default__metric_comparison_strategy_ratio"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.919053, "supported_languages": null}, "macro.metrics.default__metric_comparison_strategy_difference": {"name": "default__metric_comparison_strategy_difference", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "unique_id": "macro.metrics.default__metric_comparison_strategy_difference", "macro_sql": "{% macro default__metric_comparison_strategy_difference(metric_name, calc_sql, metric_config) -%}\n    {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n        {{ metric_name }} - {{ calc_sql }}\n    {%- else -%}\n        coalesce({{ metric_name }}, 0) - coalesce({{ calc_sql }}, 0)\n    {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9200041, "supported_languages": null}, "macro.metrics.default__metric_comparison_strategy_ratio": {"name": "default__metric_comparison_strategy_ratio", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "unique_id": "macro.metrics.default__metric_comparison_strategy_ratio", "macro_sql": "{% macro default__metric_comparison_strategy_ratio(metric_name, calc_sql, metric_config) -%}\n\n    {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n        cast({{ metric_name }} as {{ type_float() }}) / nullif({{ calc_sql }}, 0)\n    {%- else %}\n            coalesce(cast({{ metric_name }} as {{ type_float() }}) / nullif({{ calc_sql }}, 0) , 0)\n    {%- endif %}\n    \n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9205818, "supported_languages": null}, "macro.metrics.default__secondary_calculation_prior": {"name": "default__secondary_calculation_prior", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/secondary_calculation_prior.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_prior.sql", "unique_id": "macro.metrics.default__secondary_calculation_prior", "macro_sql": "{%- macro default__secondary_calculation_prior(metric_name, grain, dimensions, calc_config, metric_config) -%}\n    \n    {%- set calc_sql -%}\n        lag({{ metric_name }}, {{ calc_config.interval }}) over (\n            {% if dimensions -%}\n            partition by {{ dimensions | join(\", \") }} \n            {% endif -%}\n            order by date_{{grain}}\n        )\n    {%- endset-%}\n    {{ calc_sql }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.921371, "supported_languages": null}, "macro.metrics.generate_secondary_calculation_alias": {"name": "generate_secondary_calculation_alias", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "unique_id": "macro.metrics.generate_secondary_calculation_alias", "macro_sql": "{% macro generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n\n    {{ return(adapter.dispatch('generate_secondary_calculation_alias', 'metrics')(metric_name, calc_config, grain, is_multiple_metrics)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__generate_secondary_calculation_alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9249349, "supported_languages": null}, "macro.metrics.default__generate_secondary_calculation_alias": {"name": "default__generate_secondary_calculation_alias", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "unique_id": "macro.metrics.default__generate_secondary_calculation_alias", "macro_sql": "{% macro default__generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n    {%- if calc_config.alias -%}\n        {%- if is_multiple_metrics -%}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.alias) -%}\n        {%- else -%}\n            {% do return(calc_config.alias) %}\n        {%- endif -%}\n    {%- endif -%}\n    \n    {%- set calc_type = calc_config.calculation -%}\n    {%- if calc_type == 'period_over_period' -%}\n        {%- if is_multiple_metrics -%}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n        {%- else -%}\n            {%- do return(calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n        {%- endif -%}\n   \n    {%- elif calc_type == 'rolling' %}\n        {%- if is_multiple_metrics -%}\n            {%- if calc_config.interval -%}\n                {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n            {%- else -%}\n                {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate) %}\n            {%- endif -%}\n        {%- else -%}\n            {%- if calc_config.interval -%}\n                {%- do return(\"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n            {%- else -%}\n                {%- do return(\"rolling_\" ~ calc_config.aggregate) %}\n            {%- endif -%}\n        {%- endif -%}\n    \n    {%- elif calc_type == 'period_to_date' %}\n        {% if is_multiple_metrics %}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n        {% else %}\n            {%- do return(calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n        {% endif %}\n        \n    {%- elif calc_type == 'prior' %}\n        {% if is_multiple_metrics %}\n            {%- do return(metric_name ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n        {% else %}\n            {%- do return(calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n        {% endif %}\n\n    {%- else %}\n        {%- do exceptions.raise_compiler_error(\"Can't generate alias for unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) %}  \n    {%- endif %}\n\n    {{ calc_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.928226, "supported_languages": null}, "macro.metrics.perform_secondary_calculation": {"name": "perform_secondary_calculation", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "unique_id": "macro.metrics.perform_secondary_calculation", "macro_sql": "{%- macro perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metric_config) -%}\n    {{ return(adapter.dispatch('perform_secondary_calculation', 'metrics')(metric_name, grain, dimensions, calendar_dimensions, calc_config, metric_config)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__perform_secondary_calculation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.929513, "supported_languages": null}, "macro.metrics.default__perform_secondary_calculation": {"name": "default__perform_secondary_calculation", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "unique_id": "macro.metrics.default__perform_secondary_calculation", "macro_sql": "{% macro default__perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metric_config) %}\n    {%- set combined_dimensions = dimensions+calendar_dimensions -%}\n    {%- set calc_type = calc_config.calculation -%}\n    {%- set calc_sql = '' -%}\n    \n    {%- if calc_type == 'period_over_period' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_period_over_period', 'metrics')(metric_name, grain, combined_dimensions, calc_config, metric_config) -%}\n    {%- elif calc_type == 'rolling' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_rolling', 'metrics')(metric_name, grain, combined_dimensions, calc_config) -%}\n    {%- elif calc_type == 'period_to_date' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_period_to_date', 'metrics')(metric_name, grain, combined_dimensions, calc_config) -%}\n    {%- elif calc_type == 'prior' -%}\n        {%- set calc_sql = adapter.dispatch('secondary_calculation_prior', 'metrics')(metric_name, grain, combined_dimensions, calc_config) -%}\n    {%- else -%}\n        {%- do exceptions.raise_compiler_error(\"Unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) -%}  \n    {%- endif -%}\n    {{ calc_sql }} as {{ metrics.generate_secondary_calculation_alias(metric_name, calc_config, grain, true) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.default__secondary_calculation_period_over_period", "macro.metrics.default__secondary_calculation_rolling", "macro.metrics.default__secondary_calculation_period_to_date", "macro.metrics.default__secondary_calculation_prior", "macro.metrics.generate_secondary_calculation_alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.931463, "supported_languages": null}, "macro.metrics.get_model_group": {"name": "get_model_group", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_model_group.sql", "original_file_path": "macros/variables/get_model_group.sql", "unique_id": "macro.metrics.get_model_group", "macro_sql": "{%- macro get_model_group(models_grouping, metric_model, metric_model_name, metric_name, metric_timestamp=none, metric_filters=none, metric_window=none) -%}\n\n{#- \nThis macro is called from get_models_grouping in order to calculate\nthe group for each model based on the inputs. This allows us to reduce\nthe complexity of the aforementioned macro because there is a factorial \ncombination of possibilities based on the inputs, minus some combinations\nthat are invalid.\n\nBy factorial, we mean that the three potential inputs can be combined in \na multitude of different ways in order to calculate the group. The potential \ncombinations are:\n    - timestamp\n    - filters\n    - timestamp + window\n    - timestamp + filters\n    - timestamp + filters + window\n -#}\n\n    {% set metric_model_list = [metric_model_name] %}\n\n    {% if metric_timestamp %}\n        {% set timestamp_list = [\n            metric_timestamp | lower\n        ]%}\n    {% else %}\n        {% set timestamp_list = [] %}\n    {% endif %}\n\n    {% if metric_window %}\n        {% set window_list = [\n                metric_window.count | lower\n                ,metric_window.period | lower\n            ]%}\n    {% else %}\n        {% set window_list = [] %}\n    {% endif %}\n\n    {% if metric_filters %}\n        {% set filter_list = [] %}\n        {% for filter in metric_filters %}\n            {% do filter_list.append(filter.field | lower)%}\n            {% do filter_list.append(filter.operator | lower)%}\n            {% do filter_list.append(filter.value | lower)%}\n        {% endfor %}\n    {% else %}\n        {% set filter_list = [] %}\n    {% endif %}\n\n    {% set group_list = (metric_model_list + timestamp_list + window_list + filter_list) | sort %}\n    {% set group_name = 'model_' ~ local_md5(group_list | join('_')) %}\n\n    {% if not models_grouping[group_name] %}\n        {% do models_grouping.update({group_name:{}})%}\n        {% do models_grouping[group_name].update({'metric_names':{}})%}\n        {% do models_grouping[group_name].update({'metric_model':metric_model})%}\n        {% do models_grouping[group_name].update({'timestamp':metric_timestamp})%}\n        {% do models_grouping[group_name].update({'filters':metric_filters})%}\n        {% do models_grouping[group_name].update({'window':metric_window})%}\n        {% do models_grouping[group_name].update({'metric_names':[metric_name]})%}\n    {% else %}\n        {% set metric_names = models_grouping[group_name]['metric_names'] %}\n        {% do metric_names.append(metric_name)%}\n        {% do models_grouping[group_name].update({'metric_names':metric_names})%}\n    {% endif %}\n\n    {% do return(metrics_grouping) %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9372082, "supported_languages": null}, "macro.metrics.get_faux_metric_tree": {"name": "get_faux_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_faux_metric_tree.sql", "original_file_path": "macros/variables/get_faux_metric_tree.sql", "unique_id": "macro.metrics.get_faux_metric_tree", "macro_sql": "{% macro get_faux_metric_tree(metric_list,develop_yml)%}\n\n    {%- set metric_tree = {'full_set':[]} %}\n    {%- do metric_tree.update({'parent_set':[]}) -%}\n    {%- do metric_tree.update({'derived_set':[]}) -%}\n    {%- do metric_tree.update({'base_set':metric_list}) -%}\n    {%- do metric_tree.update({'ordered_derived_set':{}}) -%}\n\n    {% for metric_name in metric_list %}\n        {% set metric_definition = develop_yml[metric_name]%}\n        {%- set metric_tree = metrics.update_faux_metric_tree(metric_definition, metric_tree, develop_yml) -%}\n    {% endfor %}\n\n    {%- do metric_tree.update({'full_set':set(metric_tree['full_set'])}) -%}\n    {%- do metric_tree.update({'parent_set':set(metric_tree['parent_set'])}) -%}\n    {%- do metric_tree.update({'derived_set':set(metric_tree['derived_set'])}) -%}\n\n    {% for metric_name in metric_tree['parent_set']|unique%}\n        {%- do metric_tree['ordered_derived_set'].pop(metric_name) -%}\n    {% endfor %}\n\n    {# This section overrides the derived set by ordering the metrics on their depth so they \n    can be correctly referenced in the downstream sql query #}\n    {% set ordered_expression_list = []%}\n    {% for item in metric_tree['ordered_derived_set']|dictsort(false, 'value') %}\n        {% if item[0] in metric_tree[\"derived_set\"]%}\n            {% do ordered_expression_list.append(item[0])%}\n        {% endif %}\n    {% endfor %}\n    {%- do metric_tree.update({'derived_set':ordered_expression_list}) -%}\n\n    {%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.update_faux_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.940592, "supported_languages": null}, "macro.metrics.get_metrics_dictionary": {"name": "get_metrics_dictionary", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metrics_dictionary.sql", "original_file_path": "macros/variables/get_metrics_dictionary.sql", "unique_id": "macro.metrics.get_metrics_dictionary", "macro_sql": "{% macro get_metrics_dictionary(metric_tree, develop_yml = none) %}\n\n    {% set metrics_dictionary = {} %}\n\n    {% for metric_name in metric_tree.full_set %}\n        {% if develop_yml is not none %}\n            {% set metric_object = develop_yml[metric_name]%}\n        {% else %}\n            {% set metric_object = metrics.get_metric_relation(metric_name) %}\n        {% endif %}\n        {% set metric_definition = metrics.get_metric_definition(metric_object) %}\n        {% if not metric_definition.config %}\n            {% do metric_definition.update({'config':{}}) %}\n        {% endif %}\n        {% do metrics_dictionary.update({metric_name:{}})%}\n        {% do metrics_dictionary.update({metric_name:metric_definition})%}\n    {% endfor %}\n\n    {% do return(metrics_dictionary) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_metric_relation", "macro.metrics.get_metric_definition"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.942621, "supported_languages": null}, "macro.metrics.get_calendar_dimensions": {"name": "get_calendar_dimensions", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_calendar_dimensions.sql", "original_file_path": "macros/variables/get_calendar_dimensions.sql", "unique_id": "macro.metrics.get_calendar_dimensions", "macro_sql": "{% macro get_calendar_dimensions(dimensions) %}\n    \n    {% set approved_calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n    {# Here we set the calendar as either being the default provided by the package\n    or the variable provided in the project #}\n    {% set calendar_dimensions = [] %}\n    {% for dim in dimensions %}\n        {%- if dim in approved_calendar_dimensions -%}\n            {%- do calendar_dimensions.append(dim | lower) -%}\n        {%- endif -%}\n    {% endfor %}\n    {%- do return(calendar_dimensions) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.943699, "supported_languages": null}, "macro.metrics.get_non_calendar_dimension_list": {"name": "get_non_calendar_dimension_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_non_calendar_dimension_list.sql", "original_file_path": "macros/variables/get_non_calendar_dimension_list.sql", "unique_id": "macro.metrics.get_non_calendar_dimension_list", "macro_sql": "{% macro get_non_calendar_dimension_list(dimensions,calendar_dimensions) %}\n    \n    {% set calendar_dims = calendar_dimensions %}\n\n    {# Here we set the calendar as either being the default provided by the package\n    or the variable provided in the project #}\n    {% set dimension_list = [] %}\n    {% for dim in dimensions %}\n        {%- if dim not in calendar_dimensions -%}\n            {%- do dimension_list.append(dim | lower) -%}\n        {%- endif -%}\n    {% endfor %}\n    {%- do return(dimension_list) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.944601, "supported_languages": null}, "macro.metrics.update_metric_tree": {"name": "update_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/update_metric_tree.sql", "original_file_path": "macros/variables/update_metric_tree.sql", "unique_id": "macro.metrics.update_metric_tree", "macro_sql": "{% macro update_metric_tree(metric,metric_tree,metric_count=999)%}\n    \n    {# Now we see if the node already exists in the metric tree and return that if \n    it does so that we're not creating duplicates #}\n    {%- if metric.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n        {%- set full_set = metric_tree[\"full_set\"] -%}\n        {%- do full_set.append(metric.name) -%}\n        {%- do metric_tree.update({'full_set':full_set}) -%}\n\n    {%- endif -%}\n\n    {%- do metric_tree[\"ordered_derived_set\"].update({metric.name:metric_count}) -%}\n    {%- set metric_count = metric_count - 1 -%}\n\n    {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n    One is the full set, which contains all of the parent metrics and the other is the leaf\n    set, which we'll use to determine the leaf, or base metrics. #}\n\n    {# We define parent nodes as being the parent nodes that begin with metric, which lets\n    us filter out model nodes #}\n    {%- set parent_metrics = metrics.get_metric_unique_id_list(metric) -%}\n\n    {# We set an if condition based on if parent nodes. If there are none, then this metric\n    is a leaf node and any recursive loop should end #}\n        {%- if parent_metrics | length > 0 -%}\n\n            {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n            recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n            {%- for parent_id in parent_metrics -%}\n\n                {# Then we add the parent_id of the metric to the full set. If it already existed\n                then it won't make an impact but we want to make sure it is represented #}\n                {# {%- do full_set.append(parent_id) -%} #}\n                {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n                {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n                    {%- do full_set_plus.append(parent_id) -%}\n                {%- endif -%}\n                {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n                {# The parent_id variable here is a mapping back to the provided manifest and doesn't \n                allow for string parsing. So we create this variable to use instead #}\n                {# {%- set parent_metric_name = (parent_id | string).split('.')[2] -%} #}\n\n                {# And here we re-run the current macro but fill in the parent_id so that we loop again\n                with that metric information. You may be wondering, why are you using parent_id? Doesn't \n                the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n                DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n                {%- set new_parent = metrics.get_metric_relation(parent_id) -%}\n\n                {%- set metric_tree =  metrics.update_metric_tree(new_parent,metric_tree,metric_count) -%}\n\n            {%- endfor -%}\n        \n        {%- else -%}\n\n            {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n            {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n                {%- do parent_set_plus.append(metric.name) -%}\n            {%- endif -%}\n            {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n        {%- endif -%}\n\n        {%- set derived_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n        {%- do metric_tree.update({'derived_set':derived_set_plus}) -%}\n\n    {%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_metric_unique_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.948491, "supported_languages": null}, "macro.metrics.get_metric_tree": {"name": "get_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_tree.sql", "original_file_path": "macros/variables/get_metric_tree.sql", "unique_id": "macro.metrics.get_metric_tree", "macro_sql": "{% macro get_metric_tree(metric_list)%}\n\n{# We are creating the metric tree here - this includes all the leafs (first level parents)\n, the derived metrics, and the full combination of them both #}\n\n{# This line creates the metric tree dictionary and the full_set key. \nFull Set contains ALL metrics that are referenced, which includes metrics in the macro\nAND all parent/derived metrics. #}\n{%- set metric_tree = {'full_set':[]} %}\n{# The parent set is a list of parent metrics that are NOT derived metrics. IE if \nmetric C is built off of metric A and B, A and B would be the parent metrics because they \nare both upstream of Metric C AND not derived metrics themselves. #}\n{%- do metric_tree.update({'parent_set':[]}) -%}\n{# The derived set is a list of derived metrics. This includes all derived metrics referenced\nin the macro itself OR upstream of the metrics referenced in the macro #}\n{%- do metric_tree.update({'derived_set':[]}) -%}\n{# The base set is the list of metrics that are provided into the macro #}\n{%- do metric_tree.update({'base_set':[]}) -%}\n{# The ordered derived set is the list of derived metrics that are ordered based on their\nnode depth. So if Metric C were downstream of Metric A and B, which were also derived metrics,\nMetric C would have the value of 999 (max depth) and A and B would have 998, representing that they\nare one depth upstream #}\n{%- do metric_tree.update({'ordered_derived_set':{}}) -%}\n\n{% set base_set_list = []%}\n{% for metric in metric_list %}\n    {%- do base_set_list.append(metric.name) -%}\n    {%- set metric_tree = metrics.update_metric_tree(metric ,metric_tree) -%}\n{% endfor %}\n{%- do metric_tree.update({'base_set':base_set_list}) -%}\n\n{# Now we will iterate over the metric tree and make it a unique list to account for duplicates #}\n{% set full_set = [] %}\n{% set parent_set = [] %}\n{% set derived_set = [] %}\n{% set base_set = [] %}\n\n{% for metric_name in metric_tree['full_set']|unique%}\n    {% do full_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'full_set':full_set}) -%}\n\n{% for metric_name in metric_tree['parent_set']|unique%}\n    {% do parent_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'parent_set':parent_set}) -%}\n\n{% for metric_name in metric_tree['derived_set']|unique%}\n    {% do derived_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'derived_set':derived_set}) -%}\n\n{% for metric in metric_tree['parent_set']|unique%}\n    {%- do metric_tree['ordered_derived_set'].pop(metric) -%}\n{% endfor %}\n\n{# This section overrides the derived set by ordering the metrics on their depth so they \ncan be correctly referenced in the downstream sql query #}\n{% set ordered_expression_list = []%}\n{% for item in metric_tree['ordered_derived_set']|dictsort(false, 'value') %}\n    {% if item[0] in metric_tree[\"derived_set\"]%}\n        {% do ordered_expression_list.append(item[0])%}\n    {% endif %}\n{% endfor %}\n{%- do metric_tree.update({'derived_set':ordered_expression_list}) -%}\n\n{%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.update_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.953129, "supported_languages": null}, "macro.metrics.update_faux_metric_tree": {"name": "update_faux_metric_tree", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/update_faux_metric_tree.sql", "original_file_path": "macros/variables/update_faux_metric_tree.sql", "unique_id": "macro.metrics.update_faux_metric_tree", "macro_sql": "{% macro update_faux_metric_tree(metric_definition, metric_tree, develop_yml, metric_count=999)%}\n    \n\n    {# Now we see if the node already exists in the metric tree and return that if \n    it does so that we're not creating duplicates #}\n    {%- if metric_definition.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n        {%- set full_set = metric_tree[\"full_set\"] -%}\n        {%- do full_set.append(metric_definition.name) -%}\n        {%- do metric_tree.update({'full_set':full_set}) -%}\n\n    {%- endif -%}\n\n    {# Here we're starting with the highest level and assigning the metric tree that first level\n    value. This is used before de-duping in get_faux_metric_tree #}\n    {%- do metric_tree[\"ordered_derived_set\"].update({metric_definition.name:metric_count}) -%}\n    {%- set metric_count = metric_count - 1 -%}\n\n    {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n    One is the full set, which contains all of the parent metrics and the other is the leaf\n    set, which we'll use to determine the leaf, or base metrics. #}\n\n    {% set develop_metric_list = [] %}\n    {% for develop_metric_name in develop_yml %}\n        {% do develop_metric_list.append(develop_metric_name) %}\n    {% endfor %}\n\n    {# We define parent nodes as being the parent nodes that begin with metric, which lets\n    us filter out model nodes #}\n    {%- set parent_metrics = metrics.get_develop_unique_metric_id_list(metric_definition) -%}\n    {# We set an if condition based on if parent nodes. If there are none, then this metric\n    is a leaf node and any recursive loop should end #}\n    {%- if parent_metrics | length > 0 -%}\n\n        {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n        recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n        {%- for parent_metric_name in parent_metrics -%}\n\n            {# Then we add the parent_id of the metric to the full set. If it already existed\n            then it won't make an impact but we want to make sure it is represented. Will dedupe\n            in final macro #}\n            {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n            {%- if parent_metric_name in metric_tree|map(attribute=\"full_set\") -%}\n                {%- do full_set_plus.append(parent_metric_name) -%}\n            {%- endif -%}\n            {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n\n            {# And here we re-run the current macro but fill in the parent_id so that we loop again\n            with that metric information. You may be wondering, why are you using parent_id? Doesn't \n            the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n            DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n            \n            {# So here we need to test if the parent id/metric name exists in the manifest OR in\n            the develop yml. Manifest takes priority and then defaults back to yml if not present #}\n            {% if parent_metric_name in develop_metric_list and parent_metric_name is not none %}\n                {% set parent_metric_definition = develop_yml[parent_metric_name] %}\n            {% else %}\n                {%- set parent_metric_definition = metrics.get_metric_relation(parent_metric_name) -%}\n            {% endif %}\n\n            {%- set metric_tree =  metrics.update_faux_metric_tree(parent_metric_definition, metric_tree, develop_yml, metric_count) -%}\n\n        {%- endfor -%}\n    \n    {%- else -%}\n\n        {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n        {%- do parent_set_plus.append(metric_definition.name) -%}\n        {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n    {%- endif -%}\n\n    {%- set derived_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n    {%- do metric_tree.update({'derived_set':derived_set_plus}) -%}\n\n    {%- do return(metric_tree) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_develop_unique_metric_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_faux_metric_tree"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.957582, "supported_languages": null}, "macro.metrics.get_models_grouping": {"name": "get_models_grouping", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_models_grouping.sql", "original_file_path": "macros/variables/get_models_grouping.sql", "unique_id": "macro.metrics.get_models_grouping", "macro_sql": "{%- macro get_models_grouping(metric_tree, metrics_dictionary) -%}\n{#- \nThe purpose of this macro is to create a dictionary that can be used by\ngen_base_query and gen_aggregate_query in order to intelligently group\nmetrics together on whether they can be queried in the same query. These\nwill be grouped together with a unique model name as the key and the value \ncontaining the list of the metrics. This is complicated because we allow\ndifferent properties that affect the base query, so we can't do a single \ngrouping based on model. As such, if a metric contains one of these properties\nwe have to create a group for that specific combination.\n\nThe properties that cause us to group the metric seperately are:\n    - windows\n    - filters\n    - timestamp fields\n\nIn order to ensure consistency, we will also include those values in the \ndictionary so we can reference them from the metrics grouping (ie a single\nlocation) instead of from a randomly selected metric in the list of metrics.\n\nAn example output looks like:\n{\n    'model_4f977327f02b5c04af4337f54ed81a17': {\n        'metric_names':['metric_a','metric_b'],\n        'metric_timestamp': order_date,\n        'metric_filters':[\n            MetricFilter(field='had_discount', operator='is', value='true'), \n            MetricFilter(field='order_country', operator='=', value='CA')\n        ]\n        'metric_window': MetricTime(count=14, period=<MetricTimePeriod.month: 'month'>)\n    }\n} \n -#}\n\n    {% set models_grouping = {} %}\n\n    {% for metric_name in metric_tree.parent_set %}\n        {% set metric_dictionary = metrics_dictionary[metric_name] %}\n\n        {% set models_grouping = metrics.get_model_group(\n                models_grouping=models_grouping,\n                metric_model=metric_dictionary.metric_model,\n                metric_model_name=metric_dictionary.metric_model_name,\n                metric_name=metric_dictionary.name,\n                metric_timestamp=metric_dictionary.timestamp,\n                metric_filters=metric_dictionary.filters,\n                metric_window=metric_dictionary.window\n            ) %}\n\n    {% endfor %}\n\n    {% do return(models_grouping) %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.get_model_group"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9589171, "supported_languages": null}, "macro.metrics.get_total_dimension_count": {"name": "get_total_dimension_count", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_total_dimension_count.sql", "original_file_path": "macros/variables/get_total_dimension_count.sql", "unique_id": "macro.metrics.get_total_dimension_count", "macro_sql": "{%- macro get_total_dimension_count(grain, dimensions, calendar_dimensions, relevant_periods) %}\n\n{# This macro calcualtes the total amount of dimensions that will need to be grouped by #}\n\n    {%- set dimension_length = dimensions | length -%}\n    {%- set calendar_dimension_length = calendar_dimensions | length -%}\n\n    {%- if grain -%}\n        {%- set grain_length = 1 -%}\n    {%- else -%}\n        {%- set grain_length = 0 -%}\n    {%- endif -%}\n\n    {%- set cleaned_relevant_periods = [] -%}\n    {%- set period_length = relevant_periods | length -%}\n    {%- set total_length = grain_length + dimension_length + period_length + calendar_dimension_length -%}\n\n    {% do return(total_length) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.960053, "supported_languages": null}, "macro.metrics.get_metric_model_name": {"name": "get_metric_model_name", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_model_name.sql", "original_file_path": "macros/variables/get_metric_model_name.sql", "unique_id": "macro.metrics.get_metric_model_name", "macro_sql": "{% macro get_metric_model_name(metric_model) %}\n\n    {% set metric_model_name = metric_model.replace('\"','\\'').split('\\'')[1] %}\n\n    {% do return(metric_model_name) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.960565, "supported_languages": null}, "macro.metrics.get_grain_order": {"name": "get_grain_order", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "unique_id": "macro.metrics.get_grain_order", "macro_sql": "{% macro get_grain_order() %}\n    {{ return(adapter.dispatch('get_grain_order', 'metrics')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__get_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9609668, "supported_languages": null}, "macro.metrics.default__get_grain_order": {"name": "default__get_grain_order", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "unique_id": "macro.metrics.default__get_grain_order", "macro_sql": "{% macro default__get_grain_order() %}\n    {% do return (['day', 'week', 'month', 'quarter', 'year']) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.961289, "supported_languages": null}, "macro.metrics.get_relevent_periods": {"name": "get_relevent_periods", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_relevent_periods.sql", "original_file_path": "macros/variables/get_relevent_periods.sql", "unique_id": "macro.metrics.get_relevent_periods", "macro_sql": "{%- macro get_relevent_periods(grain, secondary_calculations) %}\n\n    {%- set relevant_periods = [] %}\n    {%- for calc_config in secondary_calculations if calc_config.period and calc_config.period not in relevant_periods and calc_config.period != grain %}\n        {%- do relevant_periods.append(calc_config.period) %}\n    {%- endfor -%}\n\n    {%- do return(relevant_periods)-%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.962115, "supported_languages": null}, "macro.metrics.get_develop_unique_metric_id_list": {"name": "get_develop_unique_metric_id_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_develop_unique_metric_id_list.sql", "original_file_path": "macros/variables/get_develop_unique_metric_id_list.sql", "unique_id": "macro.metrics.get_develop_unique_metric_id_list", "macro_sql": "{%- macro get_develop_unique_metric_id_list(metric_definition) %}\n\n    {% set re = modules.re %}\n\n    {%- set metric_list = [] -%}\n\n    {%- if metric_definition.calculation_method == 'derived' %}\n\n        {# First we get the list of nodes that this metric is dependent on. This is inclusive \n        of all parent metrics and SHOULD only contain parent metrics #}\n        {%- set dependency_metrics = re.findall(\"'[^']+'\",metric_definition.expression) -%}\n\n        {# This part is suboptimal - we're looping through the dependent nodes and extracting\n        the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n        right now its a list of lists #}\n        {%- for metric_name in dependency_metrics -%} \n=           {% do metric_list.append(metric_name.replace('\\'','')) %} \n        {%- endfor -%}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.963933, "supported_languages": null}, "macro.metrics.get_metric_list": {"name": "get_metric_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_list.sql", "original_file_path": "macros/variables/get_metric_list.sql", "unique_id": "macro.metrics.get_metric_list", "macro_sql": "{%- macro get_metric_list(metric) %}\n\n    {%- if metric.metrics | length > 0 %}\n\n        {# First we get the list of nodes that this metric is dependent on. This is inclusive \n        of all parent metrics and SHOULD only contain parent metrics #}\n        {%- set node_list = metric.depends_on.nodes -%}\n        {%- set metric_list = [] -%}\n\n        {# This part is suboptimal - we're looping through the dependent nodes and extracting\n        the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n        right now its a list of lists #}\n        {%- for node in node_list -%}  \n            {% set metric_name = node.split('.')[2] %}\n            {% do metric_list.append(metric_name) %}\n        {%- endfor -%}\n\n    {% else %}\n\n        {# For non-derived metrics, we just need the relation of the base model ie \n        the model that its built. Then we append it to the metric list name so the same\n        variable used in derived metrics can be used below #}\n        {%- set metric_list = [] -%}\n        {% do metric_list.append(metric.name) %}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.965298, "supported_languages": null}, "macro.metrics.get_metric_definition": {"name": "get_metric_definition", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_definition.sql", "original_file_path": "macros/variables/get_metric_definition.sql", "unique_id": "macro.metrics.get_metric_definition", "macro_sql": "{% macro get_metric_definition(metric_definition) %}\n\n    {% set metrics_dictionary_dict = {} %}\n\n    {% do metrics_dictionary_dict.update({'name': metric_definition.name})%}\n    {% do metrics_dictionary_dict.update({'calculation_method': metric_definition.calculation_method})%}\n    {% do metrics_dictionary_dict.update({'timestamp': metric_definition.timestamp})%}\n    {% do metrics_dictionary_dict.update({'time_grains': metric_definition.time_grains})%}\n    {% do metrics_dictionary_dict.update({'dimensions': metric_definition.dimensions})%}\n    {% do metrics_dictionary_dict.update({'filters': metric_definition.filters})%}\n    {% do metrics_dictionary_dict.update({'config': metric_definition.config})%}\n    {% if metric_definition.calculation_method != 'derived' %}\n        {% set metric_model_name = metrics.get_metric_model_name(metric_model=metric_definition.model) %}\n        {% do metrics_dictionary_dict.update({'metric_model_name': metric_model_name }) %}\n        {% do metrics_dictionary_dict.update({'metric_model': metrics.get_model_relation(metric_model_name, metric_name)}) %}\n    {% endif %}\n\n    {# Behavior specific to develop #}\n    {% if metric_definition is mapping %}\n        {# We need to do some cleanup for metric parsing #}\n        {% set metric_expression = metric_definition.expression | replace(\"metric(\",\"\") | replace(\")\",\"\") | replace(\"{{\",\"\") | replace(\"}}\",\"\")  | replace(\"'\",\"\") | replace('\"',\"\")  %}\n        {% do metrics_dictionary_dict.update({'expression': metric_expression})%} \n        {% if metric_definition.window %}\n            {% do metrics_dictionary_dict.update({'window': metric_definition.window}) %}\n        {% else %}\n            {% do metrics_dictionary_dict.update({'window': none}) %}\n        {% endif %}\n\n    {# Behavior specific to calculate #}\n    {% else %}\n        {% do metrics_dictionary_dict.update({'expression': metric_definition.expression})%} \n        {% do metrics_dictionary_dict.update({'window': metric_definition.window})%}\n    {% endif %}\n\n    {% do return(metrics_dictionary_dict) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_metric_model_name", "macro.metrics.get_model_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.969525, "supported_languages": null}, "macro.metrics.get_metric_unique_id_list": {"name": "get_metric_unique_id_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_unique_id_list.sql", "original_file_path": "macros/variables/get_metric_unique_id_list.sql", "unique_id": "macro.metrics.get_metric_unique_id_list", "macro_sql": "{%- macro get_metric_unique_id_list(metric) %}\n\n    {%- if metric.metrics | length > 0 %}\n\n        {# First we get the list of nodes that this metric is dependent on. This is inclusive \n        of all parent metrics and SHOULD only contain parent metrics #}\n        {%- set node_list = metric.depends_on.nodes -%}\n        {%- set metric_list = [] -%}\n\n        {# This part is suboptimal - we're looping through the dependent nodes and extracting\n        the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n        right now its a list of lists #}\n        {%- for node in node_list -%}  \n            {%- if node.split('.')[0] == 'metric' -%}\n                {% do metric_list.append(node.split('.')[2]) %} \n            {%- endif -%}\n        {%- endfor -%}\n\n    {% else %}\n\n        {# For non-derived metrics, we just need the relation of the base model ie \n        the model that its built. Then we append it to the metric list name so the same\n        variable used in derived metrics can be used below #}\n        {%- set metric_list = [] -%}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.970948, "supported_languages": null}, "macro.metrics.get_metric_allowlist": {"name": "get_metric_allowlist", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "unique_id": "macro.metrics.get_metric_allowlist", "macro_sql": "{% macro get_metric_allowlist() %}\n    {{ return(adapter.dispatch('get_metric_allowlist', 'metrics')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__get_metric_allowlist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.971581, "supported_languages": null}, "macro.metrics.default__get_metric_allowlist": {"name": "default__get_metric_allowlist", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "unique_id": "macro.metrics.default__get_metric_allowlist", "macro_sql": "{% macro default__get_metric_allowlist() %}\n    {# Keys are the primary aggregation, values are the permitted aggregations to run in secondary calculations. #}\n    {% do return ({\n        \"average\": ['min', 'max'],\n        \"median\": ['min', 'max'],\n        \"count\": ['min', 'max', 'sum', 'average'],\n        \"count_distinct\": ['min', 'max', 'sum', 'average'],\n        \"sum\": ['min', 'max', 'sum', 'average'],\n        \"max\": ['min', 'max', 'sum', 'average'],\n        \"min\": ['min', 'max', 'sum', 'average'],\n        \"derived\": ['min', 'max', 'sum'],\n    }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9727519, "supported_languages": null}, "macro.metrics.get_base_metrics": {"name": "get_base_metrics", "resource_type": "macro", "package_name": "metrics", "path": "macros/variables/get_base_metrics.sql", "original_file_path": "macros/variables/get_base_metrics.sql", "unique_id": "macro.metrics.get_base_metrics", "macro_sql": "{% macro get_base_metrics(metric) %}\n\n    -- this checks whether it is a relation or a list\n    {%- if (metric is mapping and metric.get('metadata', {}).get('calculation_method', '').endswith('Relation')) %}\n\n        {%- for child in metric recursive -%}\n\n            {%- if metric.metrics | length > 0 %}\n\n            {# First we get the list of nodes that this metric is dependent on. This is inclusive \n            of all parent metrics and SHOULD only contain parent metrics #}\n            {%- set node_list = metric.depends_on.nodes -%}\n            {%- set metric_list = [] -%}\n            {# This part is suboptimal - we're looping through the dependent nodes and extracting\n            the metric name from the idenitfier. Ideally we'd just use the metrics attribute but \n            right now its a list of lists #}\n                {%- for node in node_list -%}  \n                    {% set metric_name = node.split('.')[2] %}\n                    {% do metric_list.append(metric_name) %}\n                {%- endfor -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {% else %}\n\n        {# For non-derived metrics, we just need the relation of the base model ie \n        the model that its built. Then we append it to the metric list name so the same\n        variable used in derived metrics can be used below #}\n        {%- set metric_list = [] -%}\n        {% do metric_list.append(metric.name) %}\n\n    {%- endif %}\n\n    {% do return(metric_list) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.974981, "supported_languages": null}, "macro.metrics.gen_final_cte": {"name": "gen_final_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "unique_id": "macro.metrics.gen_final_cte", "macro_sql": "{%- macro gen_final_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where, date_alias) -%}\n    {{ return(adapter.dispatch('gen_final_cte', 'metrics')(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where, date_alias)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_final_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.977529, "supported_languages": null}, "macro.metrics.default__gen_final_cte": {"name": "default__gen_final_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "unique_id": "macro.metrics.default__gen_final_cte", "macro_sql": "{%- macro default__gen_final_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where, date_alias) %}\n\n{%- if secondary_calculations | length > 0 %}\n{#- This section is for queries using secondary calculations -#}\nselect \n    date_{{grain}} {% if date_alias%}as {{date_alias}}{%endif%}\n    {%- if secondary_calculations | length > 0 -%}\n        {%- for period in relevant_periods %}\n    ,date_{{ period }}\n        {%- endfor %}\n    {%- endif -%}\n    {%- for dim in dimensions %}\n    ,{{ dim }}\n    {%- endfor %}\n    {%- for calendar_dim in calendar_dimensions %}\n    ,{{ calendar_dim }}\n    {%- endfor %}\n    {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n    ,{{metric_name}}\n    {%- endfor %}  \n    {{ metrics.gen_secondary_calculations(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions)}}\n    {%- if models_grouping| length > 1 or metric_tree['derived_set'] | length > 0  %}\nfrom joined_metrics \n    {%- else %} \nfrom {% for group_name, group_values in models_grouping.items()-%}{{group_name}}__final {%-endfor-%}\n    {%- endif %}\n{# metric where clauses #}\n    {%- if where %}\nwhere {{ where }}\n    {%- endif %}\n{{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n{%- elif models_grouping| length > 1 or metric_tree['derived_set'] | length > 0 -%}\n{#- This section is for queries from multiple models or using derived metrics -#}\nselect \n    {%- if grain %}\n    date_{{grain}} {% if date_alias%}as {{date_alias}}{%endif%},\n    {%- endif %}\n    {%- for dim in dimensions %}\n    {{ dim }},\n    {%- endfor %}\n    {%- for calendar_dim in calendar_dimensions %}\n    {{ calendar_dim }},\n    {%- endfor %}\n    {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n    {{metric_name}}{%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}  \nfrom joined_metrics\n{#- metric where clauses -#}\n    {%- if where %}\nwhere {{ where }}\n    {%- endif -%}\n{{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n    \n{%- else -%}\n{#- This section is for non-derived, non-secondary calc queries -#}\nselect \n    {%- if grain %}\n    date_{{grain}} {% if date_alias%}as {{date_alias}}{%endif%},\n    {%- endif %}\n    {%- for dim in dimensions %}\n    {{ dim }},\n    {%- endfor %}\n    {%- for calendar_dim in calendar_dimensions %}\n    {{ calendar_dim }},\n    {% endfor -%}\n    {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n    {{metric_name}}{%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}  \n    {# {%- for metric_name in metric_tree.full_set %}\n    {{metric_name}}{%if not loop.last%},{%endif%}\n    {%- endfor %} #}\nfrom {% for group_name, group_values in models_grouping.items()-%}{{group_name}}__final {%-endfor-%}\n    {%- if where %}\nwhere {{ where }}\n    {%- endif -%}\n{{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n{%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.metrics.gen_secondary_calculations", "macro.metrics.gen_order_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.982005, "supported_languages": null}, "macro.metrics.build_metric_sql": {"name": "build_metric_sql", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/build_metric_sql.sql", "original_file_path": "macros/sql_gen/build_metric_sql.sql", "unique_id": "macro.metrics.build_metric_sql", "macro_sql": "{%- macro build_metric_sql(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, dimensions_provided, total_dimension_count, group_name, group_values) %}\n    \n    {#- This is the SQL Gen part - we've broken each component out into individual macros -#}\n    {#- We broke this out so it can loop for composite metrics -#}\n    {{ metrics.gen_aggregate_cte(\n        metrics_dictionary=metrics_dictionary,\n        grain=grain, \n        dimensions=dimensions, \n        secondary_calculations=secondary_calculations,\n        start_date=start_date, \n        end_date=end_date, \n        relevant_periods=relevant_periods, \n        calendar_dimensions=calendar_dimensions,\n        total_dimension_count=total_dimension_count,\n        group_name=group_name,\n        group_values=group_values\n    ) }}\n    \n    {#- Diverging path for secondary calcs and needing to datespine -#}\n    {%- if grain and secondary_calculations | length > 0 -%}\n\n        {%- if dimensions_provided == true -%}\n        \n            {{ metrics.gen_dimensions_cte(\n                group_name=group_name, \n                dimensions=dimensions\n            ) }}\n        \n        {%- endif -%}\n\n        {{ metrics.gen_spine_time_cte(\n            group_name=group_name, \n            grain=grain, \n            dimensions=dimensions, \n            secondary_calculations=secondary_calculations, \n            relevant_periods=relevant_periods, \n            calendar_dimensions=calendar_dimensions, \n            dimensions_provided=dimensions_provided\n        )}}\n\n    {%- endif -%}\n\n    {{ metrics.gen_metric_cte(\n        metrics_dictionary=metrics_dictionary,\n        group_name=group_name, \n        group_values=group_values,\n        grain=grain, \n        dimensions=dimensions, \n        secondary_calculations=secondary_calculations, \n        start_date=start_date, \n        end_date=end_date, \n        relevant_periods=relevant_periods, \n        calendar_dimensions=calendar_dimensions\n    )}} \n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.gen_aggregate_cte", "macro.metrics.gen_dimensions_cte", "macro.metrics.gen_spine_time_cte", "macro.metrics.gen_metric_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.984412, "supported_languages": null}, "macro.metrics.gen_dimensions_cte": {"name": "gen_dimensions_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "unique_id": "macro.metrics.gen_dimensions_cte", "macro_sql": "{%- macro gen_dimensions_cte(group_name, dimensions) -%}\n    {{ return(adapter.dispatch('gen_dimensions_cte', 'metrics')(group_name, dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_dimensions_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.98497, "supported_languages": null}, "macro.metrics.default__gen_dimensions_cte": {"name": "default__gen_dimensions_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "unique_id": "macro.metrics.default__gen_dimensions_cte", "macro_sql": "{% macro default__gen_dimensions_cte(group_name, dimensions) %}\n\n, {{group_name}}__dims as (\n\n    select distinct\n        {%- for dim in dimensions %}\n        {{ dim }}{%- if not loop.last -%},{% endif -%}\n        {%- endfor %}\n    from {{group_name}}__aggregate\n)\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.985404, "supported_languages": null}, "macro.metrics.gen_filters": {"name": "gen_filters", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_filters.sql", "original_file_path": "macros/sql_gen/gen_filters.sql", "unique_id": "macro.metrics.gen_filters", "macro_sql": "{%- macro gen_filters(model_values, start_date, end_date) -%}\n    {{ return(adapter.dispatch('gen_filters', 'metrics')(model_values, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_filters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.986337, "supported_languages": null}, "macro.metrics.default__gen_filters": {"name": "default__gen_filters", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_filters.sql", "original_file_path": "macros/sql_gen/gen_filters.sql", "unique_id": "macro.metrics.default__gen_filters", "macro_sql": "{%- macro default__gen_filters(model_values, start_date, end_date) -%}\n\n    {#- metric start/end dates also applied here to limit incoming data -#}\n    {% if start_date or end_date %}\n        and (\n        {% if start_date and end_date -%}\n            cast(base_model.{{model_values.timestamp}} as date) >= cast('{{ start_date }}' as date)\n            and cast(base_model.{{model_values.timestamp}} as date) <= cast('{{ end_date }}' as date)\n        {%- elif start_date and not end_date -%}\n            cast(base_model.{{model_values.timestamp}} as date) >= cast('{{ start_date }}' as date)\n        {%- elif end_date and not start_date -%}\n            cast(base_model.{{model_values.timestamp}} as date) <= cast('{{ end_date }}' as date)\n        {%- endif %} \n        )\n    {% endif -%} \n\n    {#- metric filter clauses... -#}\n    {% if model_values.filters %}\n        and (\n            {% for filter in model_values.filters -%}\n                {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n            {% endfor -%}\n        )\n    {% endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.987606, "supported_languages": null}, "macro.metrics.gen_order_by": {"name": "gen_order_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "unique_id": "macro.metrics.gen_order_by", "macro_sql": "{%- macro gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n    {{ return(adapter.dispatch('gen_order_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_order_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.988148, "supported_languages": null}, "macro.metrics.default__gen_order_by": {"name": "default__gen_order_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "unique_id": "macro.metrics.default__gen_order_by", "macro_sql": "{% macro default__gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) %}\n    {# #}\n    {%- if grain %}\norder by 1 desc\n    {% endif -%}\n    {# #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9884238, "supported_languages": null}, "macro.metrics.gen_spine_time_cte": {"name": "gen_spine_time_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "unique_id": "macro.metrics.gen_spine_time_cte", "macro_sql": "{%- macro gen_spine_time_cte(group_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) -%}\n    {{ return(adapter.dispatch('gen_spine_time_cte', 'metrics')(group_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_spine_time_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.989753, "supported_languages": null}, "macro.metrics.default__gen_spine_time_cte": {"name": "default__gen_spine_time_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "unique_id": "macro.metrics.default__gen_spine_time_cte", "macro_sql": "{% macro default__gen_spine_time_cte(group_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) %}\n\n, {{group_name}}__spine_time as (\n\n    select\n        calendar.date_{{grain}}\n        {%- if secondary_calculations | length > 0 -%}\n            {% for period in relevant_periods %}\n                {%- if period != grain -%}\n        , calendar.date_{{ period }}\n                {%- endif -%}\n            {% endfor -%}\n        {% endif -%}\n        {% for calendar_dim in calendar_dimensions %}\n        , calendar.{{ calendar_dim }}\n        {%- endfor %}\n        {%- for dim in dimensions %}\n        , {{group_name}}__dims.{{ dim }}\n        {%- endfor %}\n    from calendar\n    {%- if dimensions_provided %}\n    cross join {{group_name}}__dims\n    {%- endif %}\n    {{ metrics.gen_group_by(grain,dimensions,calendar_dimensions,relevant_periods) }}\n\n)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.gen_group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9908931, "supported_languages": null}, "macro.metrics.gen_calendar_join": {"name": "gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.gen_calendar_join", "macro_sql": "{% macro gen_calendar_join(group_values) %}\n    {{ return(adapter.dispatch('gen_calendar_join', 'metrics')(group_values)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_calendar_join"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.993475, "supported_languages": null}, "macro.metrics.default__gen_calendar_join": {"name": "default__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.default__gen_calendar_join", "macro_sql": "{% macro default__gen_calendar_join(group_values) %}\n        left join calendar\n        {%- if group_values.window is not none %}\n            on cast(base_model.{{group_values.timestamp}} as date) > dateadd({{group_values.window.period}}, -{{group_values.window.count}}, calendar.date_day)\n            and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n        {%- else %}\n            on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n        {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.993994, "supported_languages": null}, "macro.metrics.bigquery__gen_calendar_join": {"name": "bigquery__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.bigquery__gen_calendar_join", "macro_sql": "{% macro bigquery__gen_calendar_join(group_values) %}\n        left join calendar\n        {%- if group_values.window is not none %}\n            on cast(base_model.{{group_values.timestamp}} as date) > date_sub(calendar.date_day, interval {{group_values.window.count}} {{group_values.window.period}})\n            and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n        {%- else %}\n            on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n        {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.994519, "supported_languages": null}, "macro.metrics.postgres__gen_calendar_join": {"name": "postgres__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.postgres__gen_calendar_join", "macro_sql": "{% macro postgres__gen_calendar_join(group_values) %}\n        left join calendar\n        {%- if group_values.window is not none %}\n            on cast(base_model.{{group_values.timestamp}} as date) > calendar.date_day - interval '{{group_values.window.count}} {{group_values.window.period}}'\n            and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n        {%- else %}\n            on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n        {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.995046, "supported_languages": null}, "macro.metrics.redshift__gen_calendar_join": {"name": "redshift__gen_calendar_join", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_join.sql", "unique_id": "macro.metrics.redshift__gen_calendar_join", "macro_sql": "{% macro redshift__gen_calendar_join(group_values) %}\n        left join calendar\n        {%- if group_values.window is not none %}\n            on cast(base_model.{{group_values.timestamp}} as date) > dateadd({{group_values.window.period}}, -{{group_values.window.count}}, calendar.date_day)\n            and cast(base_model.{{group_values.timestamp}} as date) <= calendar.date_day\n        {%- else %}\n            on cast(base_model.{{group_values.timestamp}} as date) = calendar.date_day\n        {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.995565, "supported_languages": null}, "macro.metrics.gen_calendar_cte": {"name": "gen_calendar_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "unique_id": "macro.metrics.gen_calendar_cte", "macro_sql": "{%- macro gen_calendar_cte(calendar_tbl, start_date, end_date) -%}\n    {{ return(adapter.dispatch('gen_calendar_cte', 'metrics')(calendar_tbl, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_calendar_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.996295, "supported_languages": null}, "macro.metrics.default__gen_calendar_cte": {"name": "default__gen_calendar_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "unique_id": "macro.metrics.default__gen_calendar_cte", "macro_sql": "{%- macro default__gen_calendar_cte(calendar_tbl, start_date, end_date) %}\n\nwith calendar as (\n    {# This CTE creates our base calendar and then limits the date range for the \n    start and end date provided by the macro call -#}\n    select \n        * \n    from {{ calendar_tbl }}\n    {% if start_date or end_date %}\n        {%- if start_date and end_date -%}\n            where date_day >= cast('{{ start_date }}' as date)\n            and date_day <= cast('{{ end_date }}' as date)\n        {%- elif start_date and not end_date -%}\n            where date_day >= cast('{{ start_date }}' as date)\n        {%- elif end_date and not start_date -%}\n            where date_day <= cast('{{ end_date }}' as date)\n        {%- endif -%}       \n    {% endif %} \n)\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319449.9970071, "supported_languages": null}, "macro.metrics.gen_metric_cte": {"name": "gen_metric_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "unique_id": "macro.metrics.gen_metric_cte", "macro_sql": "{%- macro gen_metric_cte(metrics_dictionary, group_name, group_values, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions) -%}\n    {{ return(adapter.dispatch('gen_metric_cte', 'metrics')(metrics_dictionary, group_name, group_values, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_metric_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.00013, "supported_languages": null}, "macro.metrics.default__gen_metric_cte": {"name": "default__gen_metric_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "unique_id": "macro.metrics.default__gen_metric_cte", "macro_sql": "{%- macro default__gen_metric_cte(metrics_dictionary, group_name, group_values, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions) %}\n\n{%- set combined_dimensions = calendar_dimensions | list + dimensions | list -%}\n, {{group_name}}__final as (\n    {# #}\n    select\n        {%- if grain %}\n        parent_metric_cte.date_{{grain}},\n            {%- if secondary_calculations | length > 0 -%}\n                {% for period in relevant_periods %}\n        parent_metric_cte.date_{{ period }},\n                {%- endfor -%}\n            {%- endif -%}\n        {%- endif -%}\n        \n        {%- for calendar_dim in calendar_dimensions %}\n        parent_metric_cte.{{ calendar_dim }},\n        {%- endfor %}\n\n        {%- for dim in dimensions %}\n        parent_metric_cte.{{ dim }},\n        {%- endfor %}\n\n        {%- for metric_name in group_values.metric_names -%}\n            {# TODO: coalesce based on the value. Need to bring this config #}\n            {%- if not metrics_dictionary[metric_name].get(\"config\").get(\"treat_null_values_as_zero\", True) %}\n        {{ metric_name }}\n            {%- else %}\n        coalesce({{ metric_name }}, 0) as {{ metric_name }}\n            {%- endif %}\n        {%- if not loop.last-%},{%endif%}\n        {%- endfor %}\n\n    {%- if secondary_calculations | length > 0 %}\n    from {{group_name}}__spine_time as parent_metric_cte\n    left outer join {{group_name}}__aggregate\n        using (date_{{grain}} {%- if combined_dimensions | length > 0 -%}, {{ combined_dimensions | join(\", \") }} {%-endif-%} )\n\n    {% if not start_date or not end_date -%}\n    where (\n        {% if not start_date and not end_date -%}\n        parent_metric_cte.date_{{grain}} >= (\n            select \n                min(case when has_data then date_{{grain}} end) \n            from {{group_name}}__aggregate\n        )\n        and parent_metric_cte.date_{{grain}} <= (\n            select \n                max(case when has_data then date_{{grain}} end) \n            from {{group_name}}__aggregate\n        )\n        {% elif not start_date and end_date -%}\n        parent_metric_cte.date_{{grain}} >= (\n            select \n                min(case when has_data then date_{{grain}} end) \n            from {{group_name}}__aggregate\n        )\n        {% elif start_date and not end_date -%}\n        parent_metric_cte.date_{{grain}} <= (\n            select \n                max(case when has_data then date_{{grain}} end) \n            from {{group_name}}__aggregate\n        )\n        {%- endif %} \n        )\n    {%- endif %} \n\n    {%- else %}\n    from {{group_name}}__aggregate as parent_metric_cte\n    {%- endif %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.002988, "supported_languages": null}, "macro.metrics.gen_group_by": {"name": "gen_group_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "unique_id": "macro.metrics.gen_group_by", "macro_sql": "{%- macro gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n    {{ return(adapter.dispatch('gen_group_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0038478, "supported_languages": null}, "macro.metrics.default__gen_group_by": {"name": "default__gen_group_by", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "unique_id": "macro.metrics.default__gen_group_by", "macro_sql": "{%- macro default__gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n\n{#- This model exclusively exists because dynamic group by counts based on range \nwere too funky when we hardcoded values for 1+1. So we're getting around it by\nmaking it its own function -#}\n\n{#- The issue arises when we have an initial date column (ie date_month) where month \nis also included in the relevent periods. This causes issues and so we need to\nremove the grain from the list of relevant periods so it isnt double counted -#}\n\n    {%- set total_dimension_count = metrics.get_total_dimension_count(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n\n    {%- if grain -%}\n        group by {% for number in range(1,total_dimension_count+1) -%}{{ number }}{%- if not loop.last -%}, {% endif -%}\n        {%- endfor -%}\n    {%- else -%}\n        {%- if total_dimension_count > 0 -%}\n            group by {% for number in range(1,total_dimension_count+1) -%}{{ number }} {%- if not loop.last -%}, {% endif -%}\n            {%- endfor -%}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.get_total_dimension_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.00495, "supported_languages": null}, "macro.metrics.gen_secondary_calculations": {"name": "gen_secondary_calculations", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_secondary_calculations.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations.sql", "unique_id": "macro.metrics.gen_secondary_calculations", "macro_sql": "{%- macro gen_secondary_calculations(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions) -%}\n    {{ return(adapter.dispatch('gen_secondary_calculations', 'metrics')(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_secondary_calculations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.005858, "supported_languages": null}, "macro.metrics.default__gen_secondary_calculations": {"name": "default__gen_secondary_calculations", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_secondary_calculations.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations.sql", "unique_id": "macro.metrics.default__gen_secondary_calculations", "macro_sql": "{% macro default__gen_secondary_calculations(metric_tree, metrics_dictionary, grain, dimensions, secondary_calculations, calendar_dimensions) %}\n\n{%- for calc_config in secondary_calculations %}\n    {%- if calc_config.metric_list | length > 0 -%}\n        {%- for metric_name in calc_config.metric_list -%}\n    ,{{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metrics_dictionary[metric_name].config) }}\n        {%- endfor %}  \n    {%- else %}\n        {%- for metric_name in metric_tree.base_set -%}\n    , {{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calendar_dimensions, calc_config, metrics_dictionary[metric_name].config) }}\n        {%- endfor %}\n    {%- endif %}\n{%- endfor %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.metrics.perform_secondary_calculation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.007026, "supported_languages": null}, "macro.metrics.gen_base_query": {"name": "gen_base_query", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "unique_id": "macro.metrics.gen_base_query", "macro_sql": "{% macro gen_base_query(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) %}\n    {{ return(adapter.dispatch('gen_base_query', 'metrics')(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.default__gen_base_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.008585, "supported_languages": null}, "macro.metrics.default__gen_base_query": {"name": "default__gen_base_query", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "unique_id": "macro.metrics.default__gen_base_query", "macro_sql": "{% macro default__gen_base_query(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) %}\n        {# This is the \"base\" CTE which selects the fields we need to correctly \n        calculate the metric.  -#}\n        select \n            {% if grain -%}\n            {#- \n                Given that we've already determined the metrics in metric_names share\n                the same windows & filters, we can base the conditional off of the first \n                value in the list because the order doesn't matter. \n            -#}\n            cast(base_model.{{group_values.timestamp}} as date) as metric_date_day,\n            calendar.date_{{ grain }} as date_{{grain}},\n            calendar.date_day as window_filter_date,\n                {%- if secondary_calculations | length > 0 %}\n                    {%- for period in relevant_periods %}\n            calendar.date_{{ period }},\n                    {%- endfor -%}\n                {%- endif -%}\n            {%- endif -%}\n            {#- -#}\n            {%- for dim in dimensions %}\n            base_model.{{ dim }},\n            {%- endfor %}\n            {%- for calendar_dim in calendar_dimensions -%}\n            calendar.{{ calendar_dim }},\n            {%- endfor -%}\n            {%- for metric_name in group_values.metric_names -%}\n            {{ metrics.gen_property_to_aggregate(metrics_dictionary[metric_name], grain, dimensions, calendar_dimensions) }}\n            {%- if not loop.last -%},{%- endif -%}\n            {%- endfor%}\n        from {{ group_values.metric_model }} base_model \n        {# -#}\n        {%- if grain or calendar_dimensions|length > 0 -%}\n        {{ metrics.gen_calendar_join(group_values) }} \n        {%- endif -%}\n        {# #}\n        where 1=1\n        {#- -#}\n        {{ metrics.gen_filters(group_values, start_date, end_date) }}\n        {# #}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.metrics.gen_property_to_aggregate", "macro.metrics.gen_calendar_join", "macro.metrics.gen_filters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.01035, "supported_languages": null}, "macro.metrics.gen_aggregate_cte": {"name": "gen_aggregate_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "unique_id": "macro.metrics.gen_aggregate_cte", "macro_sql": "{%- macro gen_aggregate_cte(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) -%}\n    {{ return(adapter.dispatch('gen_aggregate_cte', 'metrics')(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_aggregate_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.012087, "supported_languages": null}, "macro.metrics.default__gen_aggregate_cte": {"name": "default__gen_aggregate_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "unique_id": "macro.metrics.default__gen_aggregate_cte", "macro_sql": "{%- macro default__gen_aggregate_cte(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, total_dimension_count, group_name, group_values) %}\n\n, {{group_name}}__aggregate as (\n    {# This is the most important CTE. Instead of joining all relevant information\n    and THEN aggregating, we are instead aggregating from the beginning and then \n    joining downstream for performance. Additionally, we're using a subquery instead \n    of a CTE, which was significantly more performant during our testing. -#}\n    {#- #}\n    select\n\n        {%- if grain %}\n        date_{{grain}},\n\n        {#- All of the other relevant periods that aren't currently selected as the grain\n        are neccesary for downstream secondary calculations. We filter it on whether \n        there are secondary calculations to reduce the need for overhead -#}\n            {%- if secondary_calculations | length > 0 -%}\n                {%- for period in relevant_periods %}\n        date_{{ period }},\n                {%- endfor -%}\n            {% endif -%}\n        {%- endif -%}\n\n        {#- This is the consistent code you'll find that loops through the list of \n        dimensions. It is used throughout this macro, with slight differences to \n        account for comma syntax around loop last -#}\n        {%- for dim in dimensions %}\n        {{ dim }},\n        {%- endfor %}\n\n        {%- for calendar_dim in calendar_dimensions %}\n        {{ calendar_dim }},\n        {% endfor -%}\n\n        {%- if grain %}\n        {{ bool_or('metric_date_day is not null') }} as has_data,\n        {%- endif %}\n\n        {#- This line performs the relevant aggregation by calling the \n        gen_primary_metric_aggregate macro. Take a look at that one if you're curious -#}\n        {%- for metric_name in group_values.metric_names -%} \n        {{ metrics.gen_primary_metric_aggregate(metrics_dictionary[metric_name].calculation_method, 'property_to_aggregate__'~metric_name) }} as {{ metric_name }}\n        {%- if not loop.last -%},{%- endif -%}\n        {%- endfor%}\n    from ({{ metrics.gen_base_query(\n                metrics_dictionary=metrics_dictionary,\n                grain=grain, \n                dimensions=dimensions, \n                secondary_calculations=secondary_calculations, \n                start_date=start_date, \n                end_date=end_date, \n                relevant_periods=relevant_periods, \n                calendar_dimensions=calendar_dimensions,\n                total_dimension_count=total_dimension_count,\n                group_name=group_name,\n                group_values=group_values\n                )\n            }}\n    ) as base_query\n\n    where 1=1\n    {#- \n        Given that we've already determined the metrics in metric_names share\n        the same windows & filters, we can base the conditional off of the first \n        value in the list because the order doesn't matter. \n     -#}\n    {%- if group_values.window is not none and grain %}\n    and date_{{grain}} = window_filter_date\n    {%- endif %}\n    {{ metrics.gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n)\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.bool_or", "macro.metrics.gen_primary_metric_aggregate", "macro.metrics.gen_base_query", "macro.metrics.gen_group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.014336, "supported_languages": null}, "macro.metrics.gen_property_to_aggregate": {"name": "gen_property_to_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.gen_property_to_aggregate", "macro_sql": "{%- macro gen_property_to_aggregate(metric_dictionary, grain, dimensions, calendar_dimensions) -%}\n    {{ return(adapter.dispatch('gen_property_to_aggregate', 'metrics')(metric_dictionary, grain, dimensions, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_property_to_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.01809, "supported_languages": null}, "macro.metrics.default__gen_property_to_aggregate": {"name": "default__gen_property_to_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__gen_property_to_aggregate", "macro_sql": "{% macro default__gen_property_to_aggregate(metric_dictionary, grain, dimensions, calendar_dimensions) %}\n    {% if metric_dictionary.calculation_method == 'median' -%}\n        {{ return(adapter.dispatch('property_to_aggregate_median', 'metrics')(metric_dictionary, grain, dimensions, calendar_dimensions)) }}\n\n    {% elif metric_dictionary.calculation_method == 'count' -%}\n        {{ return(adapter.dispatch('property_to_aggregate_count', 'metrics')(metric_dictionary)) }}\n\n    {% elif metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n        {{ return(adapter.dispatch('property_to_aggregate_default', 'metrics')(metric_dictionary)) }}\n\n    {% else %}\n        {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%}  \n    {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__property_to_aggregate_median", "macro.metrics.default__property_to_aggregate_count", "macro.metrics.default__property_to_aggregate_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.019389, "supported_languages": null}, "macro.metrics.default__property_to_aggregate_median": {"name": "default__property_to_aggregate_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__property_to_aggregate_median", "macro_sql": "{% macro default__property_to_aggregate_median(metric_dictionary, grain, dimensions, calendar_dimensions) %}\n            ({{metric_dictionary.expression }}) as property_to_aggregate__{{metric_dictionary.name}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.019682, "supported_languages": null}, "macro.metrics.bigquery__property_to_aggregate_median": {"name": "bigquery__property_to_aggregate_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.bigquery__property_to_aggregate_median", "macro_sql": "{% macro bigquery__property_to_aggregate_median(metric_dictionary, grain, dimensions, calendar_dimensions) %}\n\n            percentile_cont({{metric_dictionary.expression }}, 0.5) over (\n                {% if grain or dimensions | length > 0 or calendar_dimensions | length > 0 -%}\n                partition by \n                {% if grain -%}\n                calendar.date_{{ grain }}\n                {%- endif %}\n                {% for dim in dimensions -%}\n                    {%- if loop.first and not grain-%}\n                base_model.{{ dim }}\n                    {%- else -%}\n                ,base_model.{{ dim }}\n                    {%- endif -%}\n                {%- endfor -%}\n                {% for calendar_dim in calendar_dimensions -%}\n                    {%- if loop.first and dimensions | length == 0 and not grain %}\n                calendar.{{ calendar_dim }}\n                    {%else -%}\n                ,calendar.{{ calendar_dim }}\n                    {%- endif -%}\n                {%- endfor %}\n                {%- endif %}\n            ) as property_to_aggregate__{{metric_dictionary.name}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0208828, "supported_languages": null}, "macro.metrics.default__property_to_aggregate_count": {"name": "default__property_to_aggregate_count", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__property_to_aggregate_count", "macro_sql": "{% macro default__property_to_aggregate_count(metric_dictionary) %}\n            1 as property_to_aggregate__{{metric_dictionary.name}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.021069, "supported_languages": null}, "macro.metrics.default__property_to_aggregate_default": {"name": "default__property_to_aggregate_default", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_property_to_aggregate.sql", "original_file_path": "macros/sql_gen/gen_property_to_aggregate.sql", "unique_id": "macro.metrics.default__property_to_aggregate_default", "macro_sql": "{% macro default__property_to_aggregate_default(metric_dictionary) %}\n            ({{metric_dictionary.expression }}) as property_to_aggregate__{{metric_dictionary.name}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.021285, "supported_languages": null}, "macro.metrics.gen_primary_metric_aggregate": {"name": "gen_primary_metric_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.gen_primary_metric_aggregate", "macro_sql": "{%- macro gen_primary_metric_aggregate(aggregate, expression) -%}\n    {{ return(adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(aggregate, expression)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_primary_metric_aggregate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0243871, "supported_languages": null}, "macro.metrics.default__gen_primary_metric_aggregate": {"name": "default__gen_primary_metric_aggregate", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__gen_primary_metric_aggregate", "macro_sql": "{%- macro default__gen_primary_metric_aggregate(aggregate, expression) -%}\n\n    {%- if aggregate == 'count' -%}\n        {{ return(adapter.dispatch('metric_count', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'count_distinct' -%}\n        {{ return(adapter.dispatch('metric_count_distinct', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'average' -%}\n        {{ return(adapter.dispatch('metric_average', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'max' -%}\n        {{ return(adapter.dispatch('metric_max', 'metrics')(expression)) }}\n       \n    {%- elif aggregate == 'min' -%}\n        {{ return(adapter.dispatch('metric_min', 'metrics')(expression)) }}\n    \n    {%- elif aggregate == 'sum' -%}\n        {{ return(adapter.dispatch('metric_sum', 'metrics')(expression)) }}\n\n    {%- elif aggregate == 'median' -%}\n        {{ return(adapter.dispatch('metric_median', 'metrics')(expression)) }}\n\n    {%- elif aggregate == 'derived' -%}\n        {{ return(adapter.dispatch('metric_derived', 'metrics')(expression)) }}\n\n    {%- else -%}\n        {%- do exceptions.raise_compiler_error(\"Unknown aggregation style: \" ~ aggregate) -%}  \n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__metric_count", "macro.metrics.default__metric_count_distinct", "macro.metrics.default__metric_average", "macro.metrics.default__metric_max", "macro.metrics.default__metric_min", "macro.metrics.default__metric_sum", "macro.metrics.default__metric_median", "macro.metrics.default__metric_derived"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.02655, "supported_languages": null}, "macro.metrics.default__metric_count": {"name": "default__metric_count", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_count", "macro_sql": "{% macro default__metric_count(expression) %}\n        count({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.026731, "supported_languages": null}, "macro.metrics.default__metric_count_distinct": {"name": "default__metric_count_distinct", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_count_distinct", "macro_sql": "{% macro default__metric_count_distinct(expression) %}\n        count(distinct {{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.026897, "supported_languages": null}, "macro.metrics.default__metric_average": {"name": "default__metric_average", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_average", "macro_sql": "{% macro default__metric_average(expression) %}\n        avg({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.027061, "supported_languages": null}, "macro.metrics.redshift__metric_average": {"name": "redshift__metric_average", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.redshift__metric_average", "macro_sql": "{% macro redshift__metric_average(expression) %}\n        avg(cast({{ expression }} as float))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.027219, "supported_languages": null}, "macro.metrics.default__metric_max": {"name": "default__metric_max", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_max", "macro_sql": "{% macro default__metric_max(expression) %}\n        max({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.027404, "supported_languages": null}, "macro.metrics.default__metric_min": {"name": "default__metric_min", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_min", "macro_sql": "{% macro default__metric_min(expression) %}\n        min({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.027568, "supported_languages": null}, "macro.metrics.default__metric_sum": {"name": "default__metric_sum", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_sum", "macro_sql": "{% macro default__metric_sum(expression) %}\n        sum({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.027736, "supported_languages": null}, "macro.metrics.default__metric_median": {"name": "default__metric_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_median", "macro_sql": "{% macro default__metric_median(expression) %}\n        median({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.02789, "supported_languages": null}, "macro.metrics.bigquery__metric_median": {"name": "bigquery__metric_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.bigquery__metric_median", "macro_sql": "{% macro bigquery__metric_median(expression) %}\n        any_value({{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0280662, "supported_languages": null}, "macro.metrics.postgres__metric_median": {"name": "postgres__metric_median", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.postgres__metric_median", "macro_sql": "{% macro postgres__metric_median(expression) %}\n        percentile_cont(0.5) within group (order by {{ expression }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.028227, "supported_languages": null}, "macro.metrics.default__metric_derived": {"name": "default__metric_derived", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "unique_id": "macro.metrics.default__metric_derived", "macro_sql": "{% macro default__metric_derived(expression) %}\n        {{ expression }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.028377, "supported_languages": null}, "macro.metrics.gen_joined_metrics_cte": {"name": "gen_joined_metrics_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "unique_id": "macro.metrics.gen_joined_metrics_cte", "macro_sql": "{%- macro gen_joined_metrics_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, total_dimension_count) -%}\n    {{ return(adapter.dispatch('gen_joined_metrics_cte', 'metrics')(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, total_dimension_count)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.metrics.default__gen_joined_metrics_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.035281, "supported_languages": null}, "macro.metrics.default__gen_joined_metrics_cte": {"name": "default__gen_joined_metrics_cte", "resource_type": "macro", "package_name": "metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "unique_id": "macro.metrics.default__gen_joined_metrics_cte", "macro_sql": "{% macro default__gen_joined_metrics_cte(metric_tree, metrics_dictionary, models_grouping, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, total_dimension_count) %}\n\n{#- This section is a hacky workaround to account for postgres changes -#}\n{%- set cte_numbers = [] -%}\n{%- set unique_cte_numbers = [] -%}\n{#- the cte numbers are more representative of node depth -#}\n{%- if metric_tree.derived_set | length > 0 -%}\n    {%- for metric_name in metric_tree.ordered_derived_set -%}\n        {%- do cte_numbers.append(metric_tree.ordered_derived_set[metric_name]) -%}\n    {%- endfor -%}\n    {%- for cte_num in cte_numbers|unique -%}\n        {%- do unique_cte_numbers.append(cte_num) -%}\n    {%- endfor -%}\n{%- endif -%}\n\n{%- set dimension_count = (dimensions | length + calendar_dimensions | length) | int %}\n, first_join_metrics as (\n\n    select\n        {% if grain -%}\n        date_{{grain}},\n        {%- endif -%}\n        {%- for calendar_dim in calendar_dimensions %}\n        coalesce(\n        {%- for group_name, group_values in models_grouping.items() %}\n                {{group_name}}__final.{{ calendar_dim }}{%- if not loop.last -%},{% endif %}\n                {%- if models_grouping | length == 1 -%}\n                , NULL\n                {%- endif -%}\n            {% endfor %}\n            ) as {{calendar_dim}},\n        {% endfor %}\n    {%- for period in relevant_periods %}\n        coalesce(\n        {%- for group_name, group_values in models_grouping.items() %}\n            {{group_name}}__final.date_{{ period }} {%- if not loop.last -%},{% endif %}\n            {%- if models_grouping | length == 1 %}\n            , NULL\n            {%- endif -%}\n        {% endfor %}\n        ) as date_{{period}},\n    {%- endfor %}\n    {%- for dim in dimensions %}\n        coalesce(\n        {%- for group_name, group_values in models_grouping.items() %}\n            {{group_name}}__final.{{ dim }} {%- if not loop.last -%},{% endif %}\n            {%- if models_grouping | length == 1 %}\n            , NULL\n            {%- endif -%}\n        {% endfor %}\n        ) as {{dim}},\n    {%- endfor %}\n\n    {%- for metric_name in metric_tree.parent_set %}\n        {%- if not metrics_dictionary[metric_name].config.get(\"treat_null_values_as_zero\", True) %}\n        {{metric_name}} as {{metric_name}} {%- if not loop.last -%}, {%- endif -%}\n        {%- else  %}  \n        coalesce({{metric_name}},0) as {{metric_name}} {%- if not loop.last -%}, {%- endif -%}\n        {%- endif %}  \n    {%- endfor %}  \n    {#- Loop through leaf metric list -#}\n    {% for group_name, group_values in models_grouping.items() %}\n        {%- if loop.first %}\n    from {{ group_name }}__final\n        {%- else %}\n            {%- if grain %}\n    full outer join {{group_name}}__final\n        using (\n            date_{{grain}}\n            {%- for calendar_dim in calendar_dimensions %}\n            , {{ calendar_dim }}\n            {% endfor %}\n            {%- for dim in dimensions %}\n            , {{ dim }}\n            {%- endfor %}\n        )\n            {%- else -%}\n                {% if dimension_count != 0 %}\n    full outer join {{group_name}}__final\n        using (\n            {%- for calendar_dim in calendar_dimensions -%}\n                {%- if not loop.first -%},{%- endif -%} {{ calendar_dim }}\n            {%- endfor -%}\n            \n            {%- for dim in dimensions %}\n                {%- if loop.first and calendar_dimensions | length == 0 -%}\n            {{ dim }}\n                {%- elif not loop.first and calendar_dimensions | length == 0 -%}\n            , {{ dim }}\n                {%- else -%}\n            , {{ dim }}\n                {%- endif -%}\n            {%- endfor -%}\n        )\n                {%- elif dimension_count == 0 %}\n    cross join {{group_name}}__final\n                {%- endif %}\n            {%- endif %}\n        {%- endif -%}\n    {%- endfor %} \n{# #}\n)\n\n{%- for cte_number in cte_numbers | unique | sort %}\n{% set previous_cte_number = cte_number - 1 %}\n, join_metrics__{{cte_number}} as (\n\n    select \n    {%- if loop.first %}\n        first_join_metrics.*\n    {%- else %}\n        join_metrics__{{previous_cte_number}}.*\n    {%- endif %}\n    {%- for metric_name in metric_tree.derived_set %}\n        {%- if metric_tree.ordered_derived_set[metric_name] == cte_number %}\n            {#- this logic will parse an expression for divisions signs (/) and wrap all divisors in nullif functions to prevent divide by zero -#}\n            {#- \"1 / 2 / 3 / ... / N\" results in \"1 / nullif(2, 0) / nullif(3, 0) / ... / nullif(N, 0)\"  -#}\n            {%- set metric_expression = metrics_dictionary[metric_name].expression %}\n            {%- if \"/\" in metric_expression -%}\n                {%- set split_division_metric = metric_expression.split('/') -%}\n                {%- set dividend = split_division_metric[0] -%}\n                {%- set divisors = split_division_metric[1:] | list -%}\n                {%- set expression = dividend ~ \" / nullif(\" ~ divisors | join(\", 0) / nullif(\") ~ \", 0)\" -%}\n            {%- else -%}\n                {%- set expression = metric_expression -%}\n            {%- endif %}\n        , ({{ expression | replace(\".metric_value\",\"\") }}) as {{ metrics_dictionary[metric_name].name }}\n        {%- endif -%}\n    {%- endfor -%}\n    {% if loop.first %}\n    from first_join_metrics\n    {%- else %}\n    from join_metrics__{{previous_cte_number}}\n    {%- endif %}\n    {# #}\n)\n    \n{%- endfor %}\n\n, joined_metrics as (\n\n    select \n\n    {%- if grain %}\n        date_{{grain}},\n    {%- endif %}\n\n    {%- for period in relevant_periods %}\n        date_{{ period }},\n    {%- endfor %}\n\n    {%- for calendar_dim in calendar_dimensions %}\n        {{ calendar_dim }},\n    {%- endfor %}\n\n    {%- for dim in dimensions %}\n        {{ dim }},\n    {%- endfor %}\n\n    {%- for metric_name in metric_tree.parent_set|list + metric_tree.derived_set|list %}\n        {{metric_name}}{%- if not loop.last -%}, {%- endif -%}\n    {%- endfor %}  \n\n    {%- if metric_tree.derived_set | length == 0 %}\n    from first_join_metrics\n    {%- else %}\n    from join_metrics__999\n    {%- endif %}\n\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.042958, "supported_languages": null}, "macro.metrics.period_over_period": {"name": "period_over_period", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/period_over_period.sql", "original_file_path": "macros/secondary_calculations_configuration/period_over_period.sql", "unique_id": "macro.metrics.period_over_period", "macro_sql": "{% macro period_over_period(comparison_strategy, interval, alias, metric_list = []) %}\n\n    {% set missing_args = [] %}\n    {% if not comparison_strategy %}\n        {% set _ = missing_args.append(\"comparison_strategy\") %}\n    {% endif %}\n    {% if not interval %} \n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_over_period') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"period_over_period\",\n        \"comparison_strategy\": comparison_strategy,\n        \"interval\": interval,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0449479, "supported_languages": null}, "macro.metrics.prior": {"name": "prior", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/prior.sql", "original_file_path": "macros/secondary_calculations_configuration/prior.sql", "unique_id": "macro.metrics.prior", "macro_sql": "{% macro prior(interval, alias, metric_list = []) %}\n\n    {% set missing_args = [] %}\n    {% if not interval %} \n        {% set _ = missing_args.append(\"interval\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to prior') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"prior\",\n        \"interval\": interval,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0464928, "supported_languages": null}, "macro.metrics.period_to_date": {"name": "period_to_date", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/period_to_date.sql", "original_file_path": "macros/secondary_calculations_configuration/period_to_date.sql", "unique_id": "macro.metrics.period_to_date", "macro_sql": "{% macro period_to_date(aggregate, period, alias, metric_list = []) %}\n\n    {% set missing_args = [] %}\n    {% if not aggregate %} \n        {% set _ = missing_args.append(\"aggregate\") %}\n    {% endif %}\n    {% if not period %}\n        {% set _ = missing_args.append(\"period\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_to_date') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"period_to_date\",\n        \"aggregate\": aggregate,\n        \"period\": period,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0484118, "supported_languages": null}, "macro.metrics.rolling": {"name": "rolling", "resource_type": "macro", "package_name": "metrics", "path": "macros/secondary_calculations_configuration/rolling.sql", "original_file_path": "macros/secondary_calculations_configuration/rolling.sql", "unique_id": "macro.metrics.rolling", "macro_sql": "{% macro rolling(aggregate, interval, alias, metric_list=[]) %}\n\n    {% set missing_args = [] %}\n    {% if not aggregate %} \n        {% set _ = missing_args.append(\"aggregate\") %}\n    {% endif %}\n    {% if missing_args | length > 0 %}\n        {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to rolling') %}\n    {% endif %}\n    {% if metric_list is string %}\n        {% set metric_list = [metric_list] %}\n    {% endif %}\n\n    {% do return ({\n        \"calculation\": \"rolling\",\n        \"aggregate\": aggregate,\n        \"interval\": interval,\n        \"alias\": alias,\n        \"metric_list\": metric_list\n        })\n    %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0500329, "supported_languages": null}, "macro.metrics.is_valid_dimension": {"name": "is_valid_dimension", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/is_valid_dimension.sql", "original_file_path": "macros/validation/is_valid_dimension.sql", "unique_id": "macro.metrics.is_valid_dimension", "macro_sql": "{% macro is_valid_dimension(dim_name, dimension_list) %}\n    {% if execute %}\n        {%- if dim_name not in dimension_list -%}\n            {%- do exceptions.raise_compiler_error(dim_name ~ \" is not a valid dimension\") %}\n        {%- endif -%}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.050575, "supported_languages": null}, "macro.metrics.validate_where": {"name": "validate_where", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_where.sql", "original_file_path": "macros/validation/validate_where.sql", "unique_id": "macro.metrics.validate_where", "macro_sql": "{% macro validate_where(where) %}\n\n    {%- if where is iterable and (where is not string and where is not mapping) -%}\n        {%- do exceptions.raise_compiler_error(\"From v0.3.0 onwards, the where clause takes a single string, not a list of filters. Please fix to reflect this change\") %}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.051084, "supported_languages": null}, "macro.metrics.validate_aggregate_coherence": {"name": "validate_aggregate_coherence", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_aggregate_coherence.sql", "original_file_path": "macros/validation/validate_aggregate_coherence.sql", "unique_id": "macro.metrics.validate_aggregate_coherence", "macro_sql": "{% macro validate_aggregate_coherence(metric_aggregate, calculation_aggregate) %}\n    {% set allowlist = metrics.get_metric_allowlist()[metric_aggregate] %}\n\n    {% if (calculation_aggregate not in allowlist) %}\n        {% do exceptions.raise_compiler_error(\"Can't calculate secondary aggregate \" ~ calculation_aggregate ~ \" when metric's aggregation is \" ~ metric_aggregate ~ \". Allowed options are \" ~ allowlist ~ \".\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_metric_allowlist"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.051824, "supported_languages": null}, "macro.metrics.validate_secondary_calculations": {"name": "validate_secondary_calculations", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_secondary_calculations.sql", "original_file_path": "macros/validation/validate_secondary_calculations.sql", "unique_id": "macro.metrics.validate_secondary_calculations", "macro_sql": "{% macro validate_secondary_calculations(metric_tree, metrics_dictionary, grain, secondary_calculations) %}\n\n\n    {%- for metric_name in metric_tree.base_set %}\n        {%- for calc_config in secondary_calculations if calc_config.aggregate -%}\n            {%- do metrics.validate_aggregate_coherence(metric_aggregate=metrics_dictionary[metric_name].calculation_method, calculation_aggregate=calc_config.aggregate) -%}\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- for calc_config in secondary_calculations if calc_config.period -%}\n        {%- do metrics.validate_grain_order(metric_grain=grain, calculation_grain=calc_config.period) -%}\n    {%- endfor -%} \n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.052855, "supported_languages": null}, "macro.metrics.validate_derived_metrics": {"name": "validate_derived_metrics", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_derived_metrics.sql", "original_file_path": "macros/validation/validate_derived_metrics.sql", "unique_id": "macro.metrics.validate_derived_metrics", "macro_sql": "{% macro validate_derived_metrics(metric_tree) %}\n\n    {# We loop through the full set here to ensure that metrics that aren't listed \n    as derived are not dependent on another metric.  #}\n\n    {% for metric_name in metric_tree.full_set %}\n        {% set metric_relation = metric(metric_name)%}\n        {% set metric_relation_depends_on = metric_relation.metrics  | join (\",\") %}\n        {% if metric_relation.calculation_method != \"derived\" and metric_relation.metrics | length > 0 %}\n            {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~\" also references '\" ~ metric_relation_depends_on ~ \"' but its calculation method is '\" ~ metric_relation.calculation_method ~ \"'. Only metrics of calculation method derived can reference other metrics.\") %}\n        {%- endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.053982, "supported_languages": null}, "macro.metrics.validate_develop_metrics": {"name": "validate_develop_metrics", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_develop_metrics.sql", "original_file_path": "macros/validation/validate_develop_metrics.sql", "unique_id": "macro.metrics.validate_develop_metrics", "macro_sql": "{% macro validate_develop_metrics(metric_list, develop_yml) %}\n\n   {% for metric_name in metric_list %}\n        {% set metric_definition = develop_yml[metric_name] %}\n\n        {%- if not metric_definition.name %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml is missing a metric name\") -%}\n        {%- endif %}\n\n        {%- if not metric_definition.calculation_method %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a calculation method\") -%}\n        {%- endif %}\n\n        {%- if not metric_definition.model and metric_definition.calculation_method != 'derived' %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a model\") -%}\n        {%- endif %}\n\n        {%- if metric_definition.time_grains and grain %}\n            {%- if grain not in metric_definition.time_grains %}\n            {%- do exceptions.raise_compiler_error(\"The selected grain is missing from the metric definition of metric \" ~ metric_definition.name ) -%}\n            {%- endif %}\n        {%- endif %}\n\n        {%- if not metric_definition.expression %}\n            {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing an expression\") -%}\n        {%- endif %}\n\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.056312, "supported_languages": null}, "macro.metrics.validate_grain_order": {"name": "validate_grain_order", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_grain_order.sql", "original_file_path": "macros/validation/validate_grain_order.sql", "unique_id": "macro.metrics.validate_grain_order", "macro_sql": "{% macro validate_grain_order(metric_grain, calculation_grain) %}\n    {% set grains = metrics.get_grain_order() %}\n    \n    {% if metric_grain not in grains or calculation_grain not in grains %}\n        {% set comma = joiner(\", \") %}\n        {% do exceptions.raise_compiler_error(\"Unknown grains: [\" ~ (comma() ~ metric_grain if metric_grain not in grains) ~ (comma() ~ calculation_grain if calculation_grain not in grains) ~ \"]\") %}\n    {% endif %}\n\n    {% set metric_grain_index = grains.index(metric_grain) %}\n    {% set calculation_grain_index = grains.index(calculation_grain) %}\n\n    {% if (calculation_grain_index < metric_grain_index) %}\n        {% do exceptions.raise_compiler_error(\"Can't calculate secondary metric at \" ~ calculation_grain ~\"-level when metric is at \" ~ metric_grain ~ \"-level\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_grain_order"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0581272, "supported_languages": null}, "macro.metrics.validate_timestamp": {"name": "validate_timestamp", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_timestamp.sql", "original_file_path": "macros/validation/validate_timestamp.sql", "unique_id": "macro.metrics.validate_timestamp", "macro_sql": "{% macro validate_timestamp(grain, metric_tree, metrics_dictionary, dimensions) %}\n\n    {# We check the metrics being used and if there is no grain we ensure that \n    none of the dimensions provided are from the calendar #}\n    {% if not grain %}\n        {%- if metrics.get_calendar_dimensions(dimensions) | length > 0 -%}\n\n        {% for metric_name in metric_tree.full_set %}\n            {% set metric_relation = metrics_dictionary[metric_name]%}\n            {% if not metric_relation.timestamp %}\n                {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is using a calendar dimension but does not have a timestamp defined.\") %}\n            {% endif %}\n        {% endfor %}\n\n        {% endif %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_calendar_dimensions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.059306, "supported_languages": null}, "macro.metrics.validate_dimension_list": {"name": "validate_dimension_list", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_dimension_list.sql", "original_file_path": "macros/validation/validate_dimension_list.sql", "unique_id": "macro.metrics.validate_dimension_list", "macro_sql": "{% macro validate_dimension_list(dimensions, metric_tree, metrics_dictionary) %}\n    \n    {# This macro exists to invalidate dimensions provided to the metric macro that are not viable \n    candidates based on metric definitions. This prevents downstream run issues when the sql \n    logic attempts to group by provided dimensions and fails because they don't exist for \n    one or more of the required metrics. #}\n\n    {% set calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n    {% for dim in dimensions %}\n\n        {# Now we loop through all the metrics in the full set, which is all metrics, parent metrics,\n        and derived metrics associated with the macro call #}\n        {% for metric_name in metric_tree.full_set %}\n            {% set metric_relation = metrics_dictionary[metric_name]%}\n\n            {# This macro returns a list of dimensions that are inclusive of calendar dimensions #}\n            {% set complete_dimension_list = metric_relation.dimensions + calendar_dimensions %}\n\n            {# If the dimension provided is not present in the loop metrics dimension list then we \n            will raise an error. If it is missing in ANY of the metrics, it cannot be used in the \n            macro call. Only dimensions that are valid in all metrics are valid in the macro call #}\n            {% if dim not in complete_dimension_list %}\n                {% if dim not in calendar_dimensions  %}\n                    {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name) %}\n                {% else %}\n                    {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name ~ \". If the dimension is from a custom calendar table, please create the custom_calendar_dimension_list as shown in the README.\") %}\n                {% endif %}\n            {% endif %}\n\n        {%endfor%}\n    {%endfor%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.061195, "supported_languages": null}, "macro.metrics.validate_metric_config": {"name": "validate_metric_config", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_metric_config.sql", "original_file_path": "macros/validation/validate_metric_config.sql", "unique_id": "macro.metrics.validate_metric_config", "macro_sql": "{%- macro validate_metric_config(metrics_dictionary) -%}\n\n    {#- We loop through the metrics dictionary here to ensure that\n    1) all configs are real configs we know about\n    2) all of those have valid values passed\n    returned or used, not just those listed -#}\n\n    {%- set accepted_configs = {\n        \"enabled\" : {\"accepted_values\" : [True, False]},\n        \"treat_null_values_as_zero\" : {\"accepted_values\" : [True, False]},\n        \"restrict_no_time_grain\" : {\"accepted_values\" : [True, False]}\n        }\n    -%}\n\n    {%- for metric in metrics_dictionary -%}\n        {%- set metric_config = metrics_dictionary[metric].get(\"config\", none) -%}\n        {%- if metric_config -%}\n            {%- for config in metric_config -%}\n                {%- set config_value = metric_config[config] -%}\n                {#- some wonkiness here -- metric_config is not a dictionary, it's a MetricConfig object, so can't use the items() method -#}\n                {#- check that the config is one that we expect -#}\n                {%- if not accepted_configs[config] -%}\n                    {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config option. The config '\" ~ config ~ \"' is not accepted.\") -%}\n                {%- endif -%}\n                {#- check that the config datatype is expected -#}\n                {%- if accepted_configs[config] -%}\n                    {%- set accepted_values = accepted_configs[config][\"accepted_values\"] -%}\n                    {%- if not config_value in accepted_values -%}\n                        {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config value specified. The config '\" ~ config ~ \"' expects one of \" ~ accepted_values) -%}\n                    {%- endif -%}\n                {% endif %}\n            {%- endfor %}\n        {%- endif -%}\n    {%- endfor %}\n            \n\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.063553, "supported_languages": null}, "macro.metrics.validate_grain": {"name": "validate_grain", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_grain.sql", "original_file_path": "macros/validation/validate_grain.sql", "unique_id": "macro.metrics.validate_grain", "macro_sql": "{% macro validate_grain(grain, metric_tree, metrics_dictionary, secondary_calculations, dimensions) %}\n\n    {# We loop through the full set here to ensure that the provided grain works for all metrics\n    returned or used, not just those listed #}\n    {% if grain %}\n        {%- if not grain and secondary_calculations | length > 0 -%}\n            {%- do exceptions.raise_compiler_error(\"Secondary calculations require a grain to be provided\") -%}\n        {%- endif -%}\n\n\n        {% for metric_name in metric_tree.full_set %}\n            {% set metric_relation = metrics_dictionary[metric_name]%}\n\n            {% if grain not in metric_relation.time_grains%}\n                {% if metric_name not in metric_tree.base_set %}\n                    {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is an upstream metric of one of the provided metrics. The grain \" ~ grain ~ \" is not defined in its metric definition.\") %}\n                {% else %}\n                    {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" does not have the provided time grain \" ~ grain ~ \" defined in the metric definition.\") %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n\n    {% elif not grain %}\n        {% for metric_name in metric_tree.full_set %}\n            {% set metric_relation = metrics_dictionary[metric_name]%}\n            {% if metric_relation.get(\"config\").get(\"restrict_no_time_grain\", False) == True %}\n                {% if metric_name not in metric_tree.base_set %}\n                    {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~ \" is an upstream metric of one of the provided metrics and has been configured to not allow non time-grain queries.\") %}\n                {% else %}\n                    {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~ \" has been configured to not allow non time-grain queries.\") %}\n                {% endif %}\n            {% endif %}\n\n        {% endfor %}\n\n        {% if secondary_calculations | length > 0 %}\n            {%- do exceptions.raise_compiler_error(\"Using secondary calculations without a grain is not supported.\") %}\n        {% endif %}\n\n        {% for metric_name in metric_tree.full_set %}\n            {% if metrics_dictionary[metric_name].window is not none%}\n                {%- do exceptions.raise_compiler_error(\"Aggregating without a grain does not support metrics with window definitions.\") %}\n            {% endif%}\n        {% endfor%}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0685, "supported_languages": null}, "macro.metrics.validate_calendar_model": {"name": "validate_calendar_model", "resource_type": "macro", "package_name": "metrics", "path": "macros/validation/validate_calendar_model.sql", "original_file_path": "macros/validation/validate_calendar_model.sql", "unique_id": "macro.metrics.validate_calendar_model", "macro_sql": "{% macro validate_calendar_model() %}\n\n    {% set calendar_relation = metrics.get_model_relation(var('dbt_metrics_calendar_model', \"dbt_metrics_default_calendar\"))%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.metrics.get_model_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.068901, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.069479, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0702689, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0710459, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.072112, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.072683, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.073219, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0748758, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.076565, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.077899, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.079635, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.080641, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.081185, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.082317, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.083701, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0844212, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0851562, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.086111, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0868878, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.087741, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.088468, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0891771, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.089922, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.090928, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0919921, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0928562, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.093409, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.094039, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.094621, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.0956101, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.096938, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.098322, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.099809, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.101025, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.102515, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.103308, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.103789, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1091251, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.111731, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.112163, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.112428, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.113132, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.113569, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1138802, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.114284, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.114555, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.115538, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.116904, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.117984, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.118944, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1193159, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.119898, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.120461, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.121061, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1221912, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1236548, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.125162, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.125979, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.126357, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.127539, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.128858, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.130404, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1311512, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1316679, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.133876, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.138915, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1412191, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.146167, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1467981, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.14708, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.161456, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1681302, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1688251, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.169277, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1705542, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.170938, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1713002, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.171637, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1719291, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.172229, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.172931, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.173364, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1740422, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1750531, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.175667, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.176237, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.179339, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.180015, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.18145, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.182368, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.184364, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.187762, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.189638, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.191036, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.191784, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.192975, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1952262, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1959832, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1967301, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.1970298, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.197643, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.198613, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.19934, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.2004411, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.201063, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.2012858, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.2015092, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.2023191, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.20363, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.2052648, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.205714, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.207298, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681319450.20867, "supported_languages": null}}, "docs": {"doc.synthesia_challenge.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "synthesia_challenge", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.synthesia_challenge.__overview__", "block_contents": "## Data Documentation for Synthesia Challenge\n\nThis is the dbt project for Emma's solution to the Synthesia Analytics Engineer challenge\n\nThe source code can be found [here](https://github.com/emmahunt/synthesia-challenge)."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {"metric.synthesia_challenge.new_users": {"name": "new_users", "resource_type": "metric", "package_name": "synthesia_challenge", "path": "reporting/reporting.yml", "original_file_path": "models/reporting/reporting.yml", "unique_id": "metric.synthesia_challenge.new_users", "fqn": ["synthesia_challenge", "reporting", "new_users"], "description": "The count of new users - people or organisations who have created an account and submitted payment details for the product.", "label": "New Users", "calculation_method": "count_distinct", "expression": "user_id", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": ["user_cohort_week"], "timestamp": "created_at", "window": null, "model": "ref('dim_user')", "model_unique_id": null, "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.synthesia_challenge.dim_user"]}, "refs": [["dim_user"]], "metrics": [], "created_at": 1681319450.775871}}, "selectors": {}, "disabled": {}, "parent_map": {"model.synthesia_challenge.user_retention": ["model.synthesia_challenge.int_cohort_sizes", "model.synthesia_challenge.int_weekly_active_users"], "model.synthesia_challenge.stg_countries": ["seed.synthesia_challenge.countries"], "model.synthesia_challenge.stg_page_views": ["seed.synthesia_challenge.pages_views"], "model.synthesia_challenge.dim_user": ["model.synthesia_challenge.stg_users"], "model.synthesia_challenge.dim_web_page": ["model.synthesia_challenge.stg_page_views"], "model.synthesia_challenge.fact_page_view": ["model.synthesia_challenge.stg_page_views"], "model.synthesia_challenge.int_weekly_active_users": ["model.synthesia_challenge.dim_user", "model.synthesia_challenge.fact_page_view"], "model.synthesia_challenge.int_cohort_sizes": ["model.synthesia_challenge.dim_user"], "model.synthesia_challenge.int_page_views_joined_to_user": ["model.synthesia_challenge.dim_web_page", "model.synthesia_challenge.stg_page_views", "model.synthesia_challenge.stg_users"], "seed.synthesia_challenge.countries": [], "seed.synthesia_challenge.users": [], "seed.synthesia_challenge.pages_views": [], "model.metrics.dbt_metrics_default_calendar": [], "test.synthesia_challenge.unique_users_USER_ID.8575ad02cd": ["seed.synthesia_challenge.users"], "test.synthesia_challenge.not_null_users_USER_ID.4b4f3c9eea": ["seed.synthesia_challenge.users"], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size.928ae6466d": ["model.synthesia_challenge.user_retention"], "test.synthesia_challenge.not_null_stg_page_views_path.b66d663583": ["model.synthesia_challenge.stg_page_views"], "test.synthesia_challenge.not_null_stg_page_views_received_at.8ee35c9af0": ["model.synthesia_challenge.stg_page_views"], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path.ff4cf7e4b3": ["model.synthesia_challenge.stg_page_views"], "test.synthesia_challenge.unique_dim_user_user_id.eff0a2a278": ["model.synthesia_challenge.dim_user"], "test.synthesia_challenge.not_null_dim_user_user_id.4b202b08a3": ["model.synthesia_challenge.dim_user"], "test.synthesia_challenge.unique_fact_page_view_page_view_id.9c1b61693a": ["model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.not_null_fact_page_view_page_view_id.f9dc4bcc61": ["model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.not_null_fact_page_view_path.d184998086": ["model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_.2cb1c985c3": ["model.synthesia_challenge.dim_web_page", "model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.not_null_fact_page_view_received_at.e74dc2358f": ["model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0.97e26290a0": ["model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.not_null_fact_page_view_session_id.b4953b5f6c": ["model.synthesia_challenge.fact_page_view"], "test.synthesia_challenge.unique_dim_web_page_web_page_id.5575cf9afb": ["model.synthesia_challenge.dim_web_page"], "test.synthesia_challenge.not_null_dim_web_page_web_page_id.783e529bf8": ["model.synthesia_challenge.dim_web_page"], "test.synthesia_challenge.not_null_dim_web_page_path.eebbde8d1d": ["model.synthesia_challenge.dim_web_page"], "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_identifier.a75540fdbd": ["model.synthesia_challenge.int_page_views_joined_to_user"], "test.synthesia_challenge.not_null_int_page_views_joined_to_user_user_identifier.b504046e9b": ["model.synthesia_challenge.int_page_views_joined_to_user"], "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_id.026d66bc30": ["model.synthesia_challenge.int_page_views_joined_to_user"], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active.39515bd1db": ["model.synthesia_challenge.int_weekly_active_users"], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age.f12b4aa0ce": ["model.synthesia_challenge.int_cohort_sizes"], "model.synthesia_challenge.stg_users": ["model.synthesia_challenge.stg_countries", "model.synthesia_challenge.stg_page_views"], "test.synthesia_challenge.unique_stg_users_user_id.c2ff477e6b": ["model.synthesia_challenge.stg_users"], "test.synthesia_challenge.not_null_stg_users_user_id.980dfc1b77": ["model.synthesia_challenge.stg_users"], "source.synthesia_challenge.countries.openaddress": [], "metric.synthesia_challenge.new_users": ["model.synthesia_challenge.dim_user"]}, "child_map": {"model.synthesia_challenge.user_retention": ["test.synthesia_challenge.dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size.928ae6466d"], "model.synthesia_challenge.stg_countries": ["model.synthesia_challenge.stg_users"], "model.synthesia_challenge.stg_page_views": ["model.synthesia_challenge.dim_web_page", "model.synthesia_challenge.fact_page_view", "model.synthesia_challenge.int_page_views_joined_to_user", "model.synthesia_challenge.stg_users", "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path.ff4cf7e4b3", "test.synthesia_challenge.not_null_stg_page_views_path.b66d663583", "test.synthesia_challenge.not_null_stg_page_views_received_at.8ee35c9af0"], "model.synthesia_challenge.dim_user": ["metric.synthesia_challenge.new_users", "model.synthesia_challenge.int_cohort_sizes", "model.synthesia_challenge.int_weekly_active_users", "test.synthesia_challenge.not_null_dim_user_user_id.4b202b08a3", "test.synthesia_challenge.unique_dim_user_user_id.eff0a2a278"], "model.synthesia_challenge.dim_web_page": ["model.synthesia_challenge.int_page_views_joined_to_user", "test.synthesia_challenge.dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_.2cb1c985c3", "test.synthesia_challenge.not_null_dim_web_page_path.eebbde8d1d", "test.synthesia_challenge.not_null_dim_web_page_web_page_id.783e529bf8", "test.synthesia_challenge.unique_dim_web_page_web_page_id.5575cf9afb"], "model.synthesia_challenge.fact_page_view": ["model.synthesia_challenge.int_weekly_active_users", "test.synthesia_challenge.dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0.97e26290a0", "test.synthesia_challenge.dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_.2cb1c985c3", "test.synthesia_challenge.not_null_fact_page_view_page_view_id.f9dc4bcc61", "test.synthesia_challenge.not_null_fact_page_view_path.d184998086", "test.synthesia_challenge.not_null_fact_page_view_received_at.e74dc2358f", "test.synthesia_challenge.not_null_fact_page_view_session_id.b4953b5f6c", "test.synthesia_challenge.unique_fact_page_view_page_view_id.9c1b61693a"], "model.synthesia_challenge.int_weekly_active_users": ["model.synthesia_challenge.user_retention", "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active.39515bd1db"], "model.synthesia_challenge.int_cohort_sizes": ["model.synthesia_challenge.user_retention", "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age.f12b4aa0ce"], "model.synthesia_challenge.int_page_views_joined_to_user": ["test.synthesia_challenge.not_null_int_page_views_joined_to_user_user_identifier.b504046e9b", "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_id.026d66bc30", "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_identifier.a75540fdbd"], "seed.synthesia_challenge.countries": ["model.synthesia_challenge.stg_countries"], "seed.synthesia_challenge.users": ["test.synthesia_challenge.not_null_users_USER_ID.4b4f3c9eea", "test.synthesia_challenge.unique_users_USER_ID.8575ad02cd"], "seed.synthesia_challenge.pages_views": ["model.synthesia_challenge.stg_page_views"], "model.metrics.dbt_metrics_default_calendar": [], "test.synthesia_challenge.unique_users_USER_ID.8575ad02cd": [], "test.synthesia_challenge.not_null_users_USER_ID.4b4f3c9eea": [], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_user_retention_user_cohort_week__country__age__weeks_since_first_active__cohort_size.928ae6466d": [], "test.synthesia_challenge.not_null_stg_page_views_path.b66d663583": [], "test.synthesia_challenge.not_null_stg_page_views_received_at.8ee35c9af0": [], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_stg_page_views_received_at__user_identifier__path.ff4cf7e4b3": [], "test.synthesia_challenge.unique_dim_user_user_id.eff0a2a278": [], "test.synthesia_challenge.not_null_dim_user_user_id.4b202b08a3": [], "test.synthesia_challenge.unique_fact_page_view_page_view_id.9c1b61693a": [], "test.synthesia_challenge.not_null_fact_page_view_page_view_id.f9dc4bcc61": [], "test.synthesia_challenge.not_null_fact_page_view_path.d184998086": [], "test.synthesia_challenge.dbt_utils_relationships_where_fact_page_view_path__path__ref_dim_web_page_.2cb1c985c3": [], "test.synthesia_challenge.not_null_fact_page_view_received_at.e74dc2358f": [], "test.synthesia_challenge.dbt_utils_accepted_range_fact_page_view_dwell_time_in_seconds__True__0.97e26290a0": [], "test.synthesia_challenge.not_null_fact_page_view_session_id.b4953b5f6c": [], "test.synthesia_challenge.unique_dim_web_page_web_page_id.5575cf9afb": [], "test.synthesia_challenge.not_null_dim_web_page_web_page_id.783e529bf8": [], "test.synthesia_challenge.not_null_dim_web_page_path.eebbde8d1d": [], "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_identifier.a75540fdbd": [], "test.synthesia_challenge.not_null_int_page_views_joined_to_user_user_identifier.b504046e9b": [], "test.synthesia_challenge.unique_int_page_views_joined_to_user_user_id.026d66bc30": [], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_weekly_active_users_user_cohort_week__user_id__country__age__weeks_since_first_active.39515bd1db": [], "test.synthesia_challenge.dbt_utils_unique_combination_of_columns_int_cohort_sizes_user_cohort_week__country__age.f12b4aa0ce": [], "model.synthesia_challenge.stg_users": ["model.synthesia_challenge.dim_user", "model.synthesia_challenge.int_page_views_joined_to_user", "test.synthesia_challenge.not_null_stg_users_user_id.980dfc1b77", "test.synthesia_challenge.unique_stg_users_user_id.c2ff477e6b"], "test.synthesia_challenge.unique_stg_users_user_id.c2ff477e6b": [], "test.synthesia_challenge.not_null_stg_users_user_id.980dfc1b77": [], "source.synthesia_challenge.countries.openaddress": [], "metric.synthesia_challenge.new_users": []}}